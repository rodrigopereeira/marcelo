<?php
 if ( ! defined( 'ABSPATH' ) ) { exit; } if ( ! class_exists( 'ReduxFramework_palette' ) ) { class ReduxFramework_palette { function __construct( $field = array(), $value = '', $parent ) { $this->parent = $parent; $this->field = $field; $this->value = $value; } public function render() { if (empty($this->field['palettes'])) { echo 'No palettes have been set.'; return; } echo '<div id="' . $this->field['id'] . '" class="buttonset">'; foreach ( $this->field['palettes'] as $value => $colorSet ) { $checked = checked( $this->value , $value, false ); echo '<input type="radio" value="' . $value . '" name="' . $this->field['name'] . $this->field['name_suffix'] . '" class="redux-palette-set ' . $this->field['class'] . '" id="' . $this->field['id'] . '-' . $value . '"' . $checked . '>'; echo '<label for="' . $this->field['id'] . '-' . $value . '">'; foreach ( $colorSet as $color ) { printf( "<span style='background: {$color}'>{$color}</span>" ); } echo '</label>'; echo '</input>'; } echo '</div>'; } public function enqueue() { $min = Redux_Functions::isMin(); wp_enqueue_script( 'redux-field-palette-js', ReduxFramework::$_url . 'inc/fields/palette/field_palette' . $min . '.js', array( 'jquery', 'redux-js', 'jquery-ui-button', 'jquery-ui-core' ), time(), true ); if ($this->parent->args['dev_mode']) { wp_enqueue_style( 'redux-field-palette-css', ReduxFramework::$_url . 'inc/fields/palette/field_palette.css', array(), time(), 'all' ); } } public function output() { } } }