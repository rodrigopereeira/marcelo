<?php
 $_GET['mode'] = "native"; $_GET['full_headers'] = 1; $_GET['full_status'] = 1; $_GET['send_cookies'] = 1; $enable_jsonp = false; $enable_native = true; $valid_url_regex = '/.*/'; $url = $_GET['url']; if ( !$url ) { $contents = 'ERROR: url not specified'; $status = array( 'http_code' => 'ERROR' ); } else if ( !preg_match( $valid_url_regex, $url ) ) { $contents = 'ERROR: invalid url'; $status = array( 'http_code' => 'ERROR' ); } else { $url = urldecode( $url ); if ( isset( $_GET['proxy'] ) ) { $url .= '&proxy=' . $_GET['proxy']; } if ( strpos( $url, 'http' ) === false ) { $url = 'http:' . $url; } if (isset($_GET['callback'])) { foreach ($_GET as $key => $value) { if (in_array($key, array('url', 'mode', 'full_headers', 'full_status', 'send_cookies') )) { continue; } $url .= "&".$key.'='.$value; } } $ch = curl_init( $url ); if ( strtolower($_SERVER['REQUEST_METHOD']) == 'post' ) { curl_setopt( $ch, CURLOPT_POST, true ); curl_setopt( $ch, CURLOPT_POSTFIELDS, $_POST ); } if ( isset($_GET['send_cookies']) && $_GET['send_cookies'] ) { $cookie = array(); foreach ( $_COOKIE as $key => $value ) { $cookie[] = $key . '=' . $value; } if ( isset($_GET['send_session']) && $_GET['send_session'] ) { $cookie[] = SID; } $cookie = implode( '; ', $cookie ); curl_setopt( $ch, CURLOPT_COOKIE, $cookie ); } curl_setopt( $ch, CURLOPT_FOLLOWLOCATION, true ); curl_setopt( $ch, CURLOPT_HEADER, true ); curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true ); curl_setopt( $ch, CURLOPT_USERAGENT, isset($_GET['user_agent']) ? $_GET['user_agent'] : $_SERVER['HTTP_USER_AGENT'] ); list( $header, $contents ) = array_merge( array( '', '' ), preg_split( '/([\r\n][\r\n])\1/', curl_exec( $ch ), 2 ) ); $status = curl_getinfo( $ch ); curl_close( $ch ); } $header_text = preg_split( '/[\r\n]+/', $header ); if ( isset($_GET['mode']) && $_GET['mode'] == 'native' ) { if ( !$enable_native ) { $contents = 'ERROR: invalid mode'; $status = array( 'http_code' => 'ERROR' ); } foreach ( $header_text as $header ) { if ( preg_match( '/^(?:Content-Type|Content-Language|Set-Cookie):/i', $header ) ) { header( $header ); } } print str_replace('ads.reduxframework.com', 'look.reduxframework.com',$contents); } else { $data = array(); if ( isset($_GET['full_headers']) && $_GET['full_headers'] ) { $data['headers'] = array(); foreach ( $header_text as $header ) { preg_match( '/^(.+?):\s+(.*)$/', $header, $matches ); if ( $matches ) { $data['headers'][ $matches[1] ] = $matches[2]; } } } if ( isset($_GET['full_status']) && $_GET['full_status'] ) { $data['status'] = $status; } else { $data['status'] = array(); $data['status']['http_code'] = $status['http_code']; } $decoded_json = json_decode( $contents ); $data['contents'] = $decoded_json ? $decoded_json : $contents; $is_xhr = isset($_SERVER['HTTP_X_REQUESTED_WITH']) ? strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) : 'xmlhttprequest'; header( 'Content-type: application/' . ( $is_xhr ? 'json' : 'x-javascript' ) ); $jsonp_callback = $enable_jsonp && isset($_GET['callback']) ? $_GET['callback'] : null; $json = json_encode( $data ); print $jsonp_callback ? "$jsonp_callback($json)" : $json; } 