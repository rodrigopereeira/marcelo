<?php
 if ( ! defined( 'ABSPATH' ) ) { exit; } if ( ! class_exists( 'Browser' ) ) { class Browser { public $_agent = ''; public $_browser_name = ''; public $_version = ''; public $_platform = ''; public $_os = ''; public $_is_aol = false; public $_is_mobile = false; public $_is_robot = false; public $_aol_version = ''; public $BROWSER_UNKNOWN = 'unknown'; public $VERSION_UNKNOWN = 'unknown'; public $BROWSER_OPERA = 'Opera'; public $BROWSER_OPERA_MINI = 'Opera Mini'; public $BROWSER_WEBTV = 'WebTV'; public $BROWSER_IE = 'Internet Explorer'; public $BROWSER_POCKET_IE = 'Pocket Internet Explorer'; public $BROWSER_KONQUEROR = 'Konqueror'; public $BROWSER_ICAB = 'iCab'; public $BROWSER_OMNIWEB = 'OmniWeb'; public $BROWSER_FIREBIRD = 'Firebird'; public $BROWSER_FIREFOX = 'Firefox'; public $BROWSER_ICEWEASEL = 'Iceweasel'; public $BROWSER_SHIRETOKO = 'Shiretoko'; public $BROWSER_MOZILLA = 'Mozilla'; public $BROWSER_AMAYA = 'Amaya'; public $BROWSER_LYNX = 'Lynx'; public $BROWSER_SAFARI = 'Safari'; public $BROWSER_IPHONE = 'iPhone'; public $BROWSER_IPOD = 'iPod'; public $BROWSER_IPAD = 'iPad'; public $BROWSER_CHROME = 'Chrome'; public $BROWSER_ANDROID = 'Android'; public $BROWSER_GOOGLEBOT = 'GoogleBot'; public $BROWSER_SLURP = 'Yahoo! Slurp'; public $BROWSER_W3CVALIDATOR = 'W3C Validator'; public $BROWSER_BLACKBERRY = 'BlackBerry'; public $BROWSER_ICECAT = 'IceCat'; public $BROWSER_NOKIA_S60 = 'Nokia S60 OSS Browser'; public $BROWSER_NOKIA = 'Nokia Browser'; public $BROWSER_MSN = 'MSN Browser'; public $BROWSER_MSNBOT = 'MSN Bot'; public $BROWSER_NETSCAPE_NAVIGATOR = 'Netscape Navigator'; public $BROWSER_GALEON = 'Galeon'; public $BROWSER_NETPOSITIVE = 'NetPositive'; public $BROWSER_PHOENIX = 'Phoenix'; public $PLATFORM_UNKNOWN = 'unknown'; public $PLATFORM_WINDOWS = 'Windows'; public $PLATFORM_WINDOWS_CE = 'Windows CE'; public $PLATFORM_APPLE = 'Apple'; public $PLATFORM_LINUX = 'Linux'; public $PLATFORM_OS2 = 'OS/2'; public $PLATFORM_BEOS = 'BeOS'; public $PLATFORM_IPHONE = 'iPhone'; public $PLATFORM_IPOD = 'iPod'; public $PLATFORM_IPAD = 'iPad'; public $PLATFORM_BLACKBERRY = 'BlackBerry'; public $PLATFORM_NOKIA = 'Nokia'; public $PLATFORM_FREEBSD = 'FreeBSD'; public $PLATFORM_OPENBSD = 'OpenBSD'; public $PLATFORM_NETBSD = 'NetBSD'; public $PLATFORM_SUNOS = 'SunOS'; public $PLATFORM_OPENSOLARIS = 'OpenSolaris'; public $PLATFORM_ANDROID = 'Android'; public $OPERATING_SYSTEM_UNKNOWN = 'unknown'; function Browser( $useragent = '' ) { $this->reset(); if ( $useragent != '' ) { $this->setUserAgent( $useragent ); } else { $this->determine(); } } function reset() { $this->_agent = isset( $_SERVER['HTTP_USER_AGENT'] ) ? $_SERVER['HTTP_USER_AGENT'] : ''; $this->_browser_name = $this->BROWSER_UNKNOWN; $this->_version = $this->VERSION_UNKNOWN; $this->_platform = $this->PLATFORM_UNKNOWN; $this->_os = $this->OPERATING_SYSTEM_UNKNOWN; $this->_is_aol = false; $this->_is_mobile = false; $this->_is_robot = false; $this->_aol_version = $this->VERSION_UNKNOWN; } function isBrowser( $browserName ) { return ( 0 == strcasecmp( $this->_browser_name, trim( $browserName ) ) ); } function getBrowser() { return $this->_browser_name; } function setBrowser( $browser ) { return $this->_browser_name = $browser; } function getPlatform() { return $this->_platform; } function setPlatform( $platform ) { return $this->_platform = $platform; } function getVersion() { return $this->_version; } function setVersion( $version ) { $this->_version = preg_replace( '/[^0-9,.,a-z,A-Z-]/', '', $version ); } function getAolVersion() { return $this->_aol_version; } function setAolVersion( $version ) { $this->_aol_version = preg_replace( '/[^0-9,.,a-z,A-Z]/', '', $version ); } function isAol() { return $this->_is_aol; } function isMobile() { return $this->_is_mobile; } function isRobot() { return $this->_is_robot; } function setAol( $isAol ) { $this->_is_aol = $isAol; } function setMobile( $value = true ) { $this->_is_mobile = $value; } function setRobot( $value = true ) { $this->_is_robot = $value; } function getUserAgent() { return $this->_agent; } function setUserAgent( $agent_string ) { $this->reset(); $this->_agent = $agent_string; $this->determine(); } function isChromeFrame() { return ( strpos( $this->_agent, 'chromeframe' ) !== false ); } function __toString() { $text1 = $this->getUserAgent(); $UAline1 = substr( $text1, 0, 32 ); $text2 = $this->getUserAgent(); $towrapUA = str_replace( $UAline1, '', $text2 ); $space = ''; for ( $i = 0; $i < 25; $i ++ ) { $space .= ' '; } $wordwrapped = chunk_split( $towrapUA, 32, "\n $space" ); return "Platform:                 {$this->getPlatform()} \n" . "Browser Name:             {$this->getBrowser()}  \n" . "Browser Version:          {$this->getVersion()} \n" . "User Agent String:        $UAline1 \n\t\t\t  " . "$wordwrapped"; } function determine() { $this->checkPlatform(); $this->checkBrowsers(); $this->checkForAol(); } function checkBrowsers() { return ( $this->checkBrowserWebTv() || $this->checkBrowserInternetExplorer() || $this->checkBrowserOpera() || $this->checkBrowserGaleon() || $this->checkBrowserNetscapeNavigator9Plus() || $this->checkBrowserFirefox() || $this->checkBrowserChrome() || $this->checkBrowserOmniWeb() || $this->checkBrowserAndroid() || $this->checkBrowseriPad() || $this->checkBrowseriPod() || $this->checkBrowseriPhone() || $this->checkBrowserBlackBerry() || $this->checkBrowserNokia() || $this->checkBrowserGoogleBot() || $this->checkBrowserMSNBot() || $this->checkBrowserSlurp() || $this->checkBrowserSafari() || $this->checkBrowserNetPositive() || $this->checkBrowserFirebird() || $this->checkBrowserKonqueror() || $this->checkBrowserIcab() || $this->checkBrowserPhoenix() || $this->checkBrowserAmaya() || $this->checkBrowserLynx() || $this->checkBrowserShiretoko() || $this->checkBrowserIceCat() || $this->checkBrowserW3CValidator() || $this->checkBrowserMozilla() ); } function checkBrowserBlackBerry() { if ( stripos( $this->_agent, 'blackberry' ) !== false ) { $aresult = explode( "/", stristr( $this->_agent, "BlackBerry" ) ); $aversion = explode( ' ', $aresult[1] ); $this->setVersion( $aversion[0] ); $this->_browser_name = $this->BROWSER_BLACKBERRY; $this->setMobile( true ); return true; } return false; } function checkForAol() { $this->setAol( false ); $this->setAolVersion( $this->VERSION_UNKNOWN ); if ( stripos( $this->_agent, 'aol' ) !== false ) { $aversion = explode( ' ', stristr( $this->_agent, 'AOL' ) ); $this->setAol( true ); $this->setAolVersion( preg_replace( '/[^0-9\.a-z]/i', '', $aversion[1] ) ); return true; } return false; } function checkBrowserGoogleBot() { if ( stripos( $this->_agent, 'googlebot' ) !== false ) { $aresult = explode( '/', stristr( $this->_agent, 'googlebot' ) ); $aversion = explode( ' ', $aresult[1] ); $this->setVersion( str_replace( ';', '', $aversion[0] ) ); $this->_browser_name = $this->BROWSER_GOOGLEBOT; $this->setRobot( true ); return true; } return false; } function checkBrowserMSNBot() { if ( stripos( $this->_agent, "msnbot" ) !== false ) { $aresult = explode( "/", stristr( $this->_agent, "msnbot" ) ); $aversion = explode( " ", $aresult[1] ); $this->setVersion( str_replace( ";", "", $aversion[0] ) ); $this->_browser_name = $this->BROWSER_MSNBOT; $this->setRobot( true ); return true; } return false; } function checkBrowserW3CValidator() { if ( stripos( $this->_agent, 'W3C-checklink' ) !== false ) { $aresult = explode( '/', stristr( $this->_agent, 'W3C-checklink' ) ); $aversion = explode( ' ', $aresult[1] ); $this->setVersion( $aversion[0] ); $this->_browser_name = $this->BROWSER_W3CVALIDATOR; return true; } else if ( stripos( $this->_agent, 'W3C_Validator' ) !== false ) { $ua = str_replace( "W3C_Validator ", "W3C_Validator/", $this->_agent ); $aresult = explode( '/', stristr( $ua, 'W3C_Validator' ) ); $aversion = explode( ' ', $aresult[1] ); $this->setVersion( $aversion[0] ); $this->_browser_name = $this->BROWSER_W3CVALIDATOR; return true; } return false; } function checkBrowserSlurp() { if ( stripos( $this->_agent, 'slurp' ) !== false ) { $aresult = explode( '/', stristr( $this->_agent, 'Slurp' ) ); $aversion = explode( ' ', $aresult[1] ); $this->setVersion( $aversion[0] ); $this->_browser_name = $this->BROWSER_SLURP; $this->setRobot( true ); $this->setMobile( false ); return true; } return false; } function checkBrowserInternetExplorer() { if ( stripos( $this->_agent, 'microsoft internet explorer' ) !== false ) { $this->setBrowser( $this->BROWSER_IE ); $this->setVersion( '1.0' ); $aresult = stristr( $this->_agent, '/' ); if ( preg_match( '/308|425|426|474|0b1/i', $aresult ) ) { $this->setVersion( '1.5' ); } return true; } else if ( stripos( $this->_agent, 'msie' ) !== false && stripos( $this->_agent, 'opera' ) === false ) { if ( stripos( $this->_agent, 'msnb' ) !== false ) { $aresult = explode( ' ', stristr( str_replace( ';', '; ', $this->_agent ), 'MSN' ) ); $this->setBrowser( $this->BROWSER_MSN ); $this->setVersion( str_replace( array( '(', ')', ';' ), '', $aresult[1] ) ); return true; } $aresult = explode( ' ', stristr( str_replace( ';', '; ', $this->_agent ), 'msie' ) ); $this->setBrowser( $this->BROWSER_IE ); $this->setVersion( str_replace( array( '(', ')', ';' ), '', $aresult[1] ) ); return true; } else if ( stripos( $this->_agent, 'mspie' ) !== false || stripos( $this->_agent, 'pocket' ) !== false ) { $aresult = explode( ' ', stristr( $this->_agent, 'mspie' ) ); $this->setPlatform( $this->PLATFORM_WINDOWS_CE ); $this->setBrowser( $this->BROWSER_POCKET_IE ); $this->setMobile( true ); if ( stripos( $this->_agent, 'mspie' ) !== false ) { $this->setVersion( $aresult[1] ); } else { $aversion = explode( '/', $this->_agent ); $this->setVersion( $aversion[1] ); } return true; } return false; } function checkBrowserOpera() { if ( stripos( $this->_agent, 'opera mini' ) !== false ) { $resultant = stristr( $this->_agent, 'opera mini' ); if ( preg_match( '/\//', $resultant ) ) { $aresult = explode( '/', $resultant ); $aversion = explode( ' ', $aresult[1] ); $this->setVersion( $aversion[0] ); } else { $aversion = explode( ' ', stristr( $resultant, 'opera mini' ) ); $this->setVersion( $aversion[1] ); } $this->_browser_name = $this->BROWSER_OPERA_MINI; $this->setMobile( true ); return true; } else if ( stripos( $this->_agent, 'opera' ) !== false ) { $resultant = stristr( $this->_agent, 'opera' ); if ( preg_match( '/Version\/(10.*)$/', $resultant, $matches ) ) { $this->setVersion( $matches[1] ); } else if ( preg_match( '/\//', $resultant ) ) { $aresult = explode( '/', str_replace( "(", " ", $resultant ) ); $aversion = explode( ' ', $aresult[1] ); $this->setVersion( $aversion[0] ); } else { $aversion = explode( ' ', stristr( $resultant, 'opera' ) ); $this->setVersion( isset( $aversion[1] ) ? $aversion[1] : "" ); } $this->_browser_name = $this->BROWSER_OPERA; return true; } return false; } function checkBrowserChrome() { if ( stripos( $this->_agent, 'Chrome' ) !== false ) { $aresult = explode( '/', stristr( $this->_agent, 'Chrome' ) ); $aversion = explode( ' ', $aresult[1] ); $this->setVersion( $aversion[0] ); $this->setBrowser( $this->BROWSER_CHROME ); return true; } return false; } function checkBrowserWebTv() { if ( stripos( $this->_agent, 'webtv' ) !== false ) { $aresult = explode( '/', stristr( $this->_agent, 'webtv' ) ); $aversion = explode( ' ', $aresult[1] ); $this->setVersion( $aversion[0] ); $this->setBrowser( $this->BROWSER_WEBTV ); return true; } return false; } function checkBrowserNetPositive() { if ( stripos( $this->_agent, 'NetPositive' ) !== false ) { $aresult = explode( '/', stristr( $this->_agent, 'NetPositive' ) ); $aversion = explode( ' ', $aresult[1] ); $this->setVersion( str_replace( array( '(', ')', ';' ), '', $aversion[0] ) ); $this->setBrowser( $this->BROWSER_NETPOSITIVE ); return true; } return false; } function checkBrowserGaleon() { if ( stripos( $this->_agent, 'galeon' ) !== false ) { $aresult = explode( ' ', stristr( $this->_agent, 'galeon' ) ); $aversion = explode( '/', $aresult[0] ); $this->setVersion( $aversion[1] ); $this->setBrowser( $this->BROWSER_GALEON ); return true; } return false; } function checkBrowserKonqueror() { if ( stripos( $this->_agent, 'Konqueror' ) !== false ) { $aresult = explode( ' ', stristr( $this->_agent, 'Konqueror' ) ); $aversion = explode( '/', $aresult[0] ); $this->setVersion( $aversion[1] ); $this->setBrowser( $this->BROWSER_KONQUEROR ); return true; } return false; } function checkBrowserIcab() { if ( stripos( $this->_agent, 'icab' ) !== false ) { $aversion = explode( ' ', stristr( str_replace( '/', ' ', $this->_agent ), 'icab' ) ); $this->setVersion( $aversion[1] ); $this->setBrowser( $this->BROWSER_ICAB ); return true; } return false; } function checkBrowserOmniWeb() { if ( stripos( $this->_agent, 'omniweb' ) !== false ) { $aresult = explode( '/', stristr( $this->_agent, 'omniweb' ) ); $aversion = explode( ' ', isset( $aresult[1] ) ? $aresult[1] : "" ); $this->setVersion( $aversion[0] ); $this->setBrowser( $this->BROWSER_OMNIWEB ); return true; } return false; } function checkBrowserPhoenix() { if ( stripos( $this->_agent, 'Phoenix' ) !== false ) { $aversion = explode( '/', stristr( $this->_agent, 'Phoenix' ) ); $this->setVersion( $aversion[1] ); $this->setBrowser( $this->BROWSER_PHOENIX ); return true; } return false; } function checkBrowserFirebird() { if ( stripos( $this->_agent, 'Firebird' ) !== false ) { $aversion = explode( '/', stristr( $this->_agent, 'Firebird' ) ); $this->setVersion( $aversion[1] ); $this->setBrowser( $this->BROWSER_FIREBIRD ); return true; } return false; } function checkBrowserNetscapeNavigator9Plus() { if ( stripos( $this->_agent, 'Firefox' ) !== false && preg_match( '/Navigator\/([^ ]*)/i', $this->_agent, $matches ) ) { $this->setVersion( $matches[1] ); $this->setBrowser( $this->BROWSER_NETSCAPE_NAVIGATOR ); return true; } else if ( stripos( $this->_agent, 'Firefox' ) === false && preg_match( '/Netscape6?\/([^ ]*)/i', $this->_agent, $matches ) ) { $this->setVersion( $matches[1] ); $this->setBrowser( $this->BROWSER_NETSCAPE_NAVIGATOR ); return true; } return false; } function checkBrowserShiretoko() { if ( stripos( $this->_agent, 'Mozilla' ) !== false && preg_match( '/Shiretoko\/([^ ]*)/i', $this->_agent, $matches ) ) { $this->setVersion( $matches[1] ); $this->setBrowser( $this->BROWSER_SHIRETOKO ); return true; } return false; } function checkBrowserIceCat() { if ( stripos( $this->_agent, 'Mozilla' ) !== false && preg_match( '/IceCat\/([^ ]*)/i', $this->_agent, $matches ) ) { $this->setVersion( $matches[1] ); $this->setBrowser( $this->BROWSER_ICECAT ); return true; } return false; } function checkBrowserNokia() { if ( preg_match( "/Nokia([^\/]+)\/([^ SP]+)/i", $this->_agent, $matches ) ) { $this->setVersion( $matches[2] ); if ( stripos( $this->_agent, 'Series60' ) !== false || strpos( $this->_agent, 'S60' ) !== false ) { $this->setBrowser( $this->BROWSER_NOKIA_S60 ); } else { $this->setBrowser( $this->BROWSER_NOKIA ); } $this->setMobile( true ); return true; } return false; } function checkBrowserFirefox() { if ( stripos( $this->_agent, 'safari' ) === false ) { if ( preg_match( "/Firefox[\/ \(]([^ ;\)]+)/i", $this->_agent, $matches ) ) { $this->setVersion( $matches[1] ); $this->setBrowser( $this->BROWSER_FIREFOX ); return true; } else if ( preg_match( "/Firefox$/i", $this->_agent, $matches ) ) { $this->setVersion( "" ); $this->setBrowser( $this->BROWSER_FIREFOX ); return true; } } return false; } function checkBrowserIceweasel() { if ( stripos( $this->_agent, 'Iceweasel' ) !== false ) { $aresult = explode( '/', stristr( $this->_agent, 'Iceweasel' ) ); $aversion = explode( ' ', $aresult[1] ); $this->setVersion( $aversion[0] ); $this->setBrowser( $this->BROWSER_ICEWEASEL ); return true; } return false; } function checkBrowserMozilla() { if ( stripos( $this->_agent, 'mozilla' ) !== false && preg_match( '/rv:[0-9].[0-9][a-b]?/i', $this->_agent ) && stripos( $this->_agent, 'netscape' ) === false ) { $aversion = explode( ' ', stristr( $this->_agent, 'rv:' ) ); preg_match( '/rv:[0-9].[0-9][a-b]?/i', $this->_agent, $aversion ); $this->setVersion( str_replace( 'rv:', '', $aversion[0] ) ); $this->setBrowser( $this->BROWSER_MOZILLA ); return true; } else if ( stripos( $this->_agent, 'mozilla' ) !== false && preg_match( '/rv:[0-9]\.[0-9]/i', $this->_agent ) && stripos( $this->_agent, 'netscape' ) === false ) { $aversion = explode( '', stristr( $this->_agent, 'rv:' ) ); $this->setVersion( str_replace( 'rv:', '', $aversion[0] ) ); $this->setBrowser( $this->BROWSER_MOZILLA ); return true; } else if ( stripos( $this->_agent, 'mozilla' ) !== false && preg_match( '/mozilla\/([^ ]*)/i', $this->_agent, $matches ) && stripos( $this->_agent, 'netscape' ) === false ) { $this->setVersion( $matches[1] ); $this->setBrowser( $this->BROWSER_MOZILLA ); return true; } return false; } function checkBrowserLynx() { if ( stripos( $this->_agent, 'lynx' ) !== false ) { $aresult = explode( '/', stristr( $this->_agent, 'Lynx' ) ); $aversion = explode( ' ', ( isset( $aresult[1] ) ? $aresult[1] : "" ) ); $this->setVersion( $aversion[0] ); $this->setBrowser( $this->BROWSER_LYNX ); return true; } return false; } function checkBrowserAmaya() { if ( stripos( $this->_agent, 'amaya' ) !== false ) { $aresult = explode( '/', stristr( $this->_agent, 'Amaya' ) ); $aversion = explode( ' ', $aresult[1] ); $this->setVersion( $aversion[0] ); $this->setBrowser( $this->BROWSER_AMAYA ); return true; } return false; } function checkBrowserSafari() { if ( stripos( $this->_agent, 'Safari' ) !== false && stripos( $this->_agent, 'iPhone' ) === false && stripos( $this->_agent, 'iPod' ) === false ) { $aresult = explode( '/', stristr( $this->_agent, 'Version' ) ); if ( isset( $aresult[1] ) ) { $aversion = explode( ' ', $aresult[1] ); $this->setVersion( $aversion[0] ); } else { $this->setVersion( $this->VERSION_UNKNOWN ); } $this->setBrowser( $this->BROWSER_SAFARI ); return true; } return false; } function checkBrowseriPhone() { if ( stripos( $this->_agent, 'iPhone' ) !== false ) { $aresult = explode( '/', stristr( $this->_agent, 'Version' ) ); if ( isset( $aresult[1] ) ) { $aversion = explode( ' ', $aresult[1] ); $this->setVersion( $aversion[0] ); } else { $this->setVersion( $this->VERSION_UNKNOWN ); } $this->setMobile( true ); $this->setBrowser( $this->BROWSER_IPHONE ); return true; } return false; } function checkBrowseriPad() { if ( stripos( $this->_agent, 'iPad' ) !== false ) { $aresult = explode( '/', stristr( $this->_agent, 'Version' ) ); if ( isset( $aresult[1] ) ) { $aversion = explode( ' ', $aresult[1] ); $this->setVersion( $aversion[0] ); } else { $this->setVersion( $this->VERSION_UNKNOWN ); } $this->setMobile( true ); $this->setBrowser( $this->BROWSER_IPAD ); return true; } return false; } function checkBrowseriPod() { if ( stripos( $this->_agent, 'iPod' ) !== false ) { $aresult = explode( '/', stristr( $this->_agent, 'Version' ) ); if ( isset( $aresult[1] ) ) { $aversion = explode( ' ', $aresult[1] ); $this->setVersion( $aversion[0] ); } else { $this->setVersion( $this->VERSION_UNKNOWN ); } $this->setMobile( true ); $this->setBrowser( $this->BROWSER_IPOD ); return true; } return false; } function checkBrowserAndroid() { if ( stripos( $this->_agent, 'Android' ) !== false ) { $aresult = explode( ' ', stristr( $this->_agent, 'Android' ) ); if ( isset( $aresult[1] ) ) { $aversion = explode( ' ', $aresult[1] ); $this->setVersion( $aversion[0] ); } else { $this->setVersion( $this->VERSION_UNKNOWN ); } $this->setMobile( true ); $this->setBrowser( $this->BROWSER_ANDROID ); return true; } return false; } function checkPlatform() { if ( stripos( $this->_agent, 'windows' ) !== false ) { $this->_platform = $this->PLATFORM_WINDOWS; } elseif ( stripos( $this->_agent, 'iPad' ) !== false ) { $this->_platform = $this->PLATFORM_IPAD; } elseif ( stripos( $this->_agent, 'iPod' ) !== false ) { $this->_platform = $this->PLATFORM_IPOD; } elseif ( stripos( $this->_agent, 'iPhone' ) !== false ) { $this->_platform = $this->PLATFORM_IPHONE; } elseif ( stripos( $this->_agent, 'mac' ) !== false ) { $this->_platform = $this->PLATFORM_APPLE; } elseif ( stripos( $this->_agent, 'android' ) !== false ) { $this->_platform = $this->PLATFORM_ANDROID; } elseif ( stripos( $this->_agent, 'linux' ) !== false ) { $this->_platform = $this->PLATFORM_LINUX; } elseif ( stripos( $this->_agent, 'Nokia' ) !== false ) { $this->_platform = $this->PLATFORM_NOKIA; } elseif ( stripos( $this->_agent, 'BlackBerry' ) !== false ) { $this->_platform = $this->PLATFORM_BLACKBERRY; } elseif ( stripos( $this->_agent, 'FreeBSD' ) !== false ) { $this->_platform = $this->PLATFORM_FREEBSD; } elseif ( stripos( $this->_agent, 'OpenBSD' ) !== false ) { $this->_platform = $this->PLATFORM_OPENBSD; } elseif ( stripos( $this->_agent, 'NetBSD' ) !== false ) { $this->_platform = $this->PLATFORM_NETBSD; } elseif ( stripos( $this->_agent, 'OpenSolaris' ) !== false ) { $this->_platform = $this->PLATFORM_OPENSOLARIS; } elseif ( stripos( $this->_agent, 'SunOS' ) !== false ) { $this->_platform = $this->PLATFORM_SUNOS; } elseif ( stripos( $this->_agent, 'OS\/2' ) !== false ) { $this->_platform = $this->PLATFORM_OS2; } elseif ( stripos( $this->_agent, 'BeOS' ) !== false ) { $this->_platform = $this->PLATFORM_BEOS; } elseif ( stripos( $this->_agent, 'win' ) !== false ) { $this->_platform = $this->PLATFORM_WINDOWS; } } } }