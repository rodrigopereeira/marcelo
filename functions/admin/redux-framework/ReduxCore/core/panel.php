<?php
 if ( ! defined( 'ABSPATH' ) ) { exit; } if ( ! class_exists( 'reduxCorePanel' ) ) { class reduxCorePanel { public $parent = null; public $template_path = null; public $original_path = null; public function __construct( $parent ) { $this->parent = $parent; Redux_Functions::$_parent = $parent; $this->template_path = $this->original_path = ReduxFramework::$_dir . 'templates/panel/'; if ( ! empty( $this->parent->args['templates_path'] ) ) { $this->template_path = trailingslashit( $this->parent->args['templates_path'] ); } $this->template_path = trailingslashit( apply_filters( "redux/{$this->parent->args['opt_name']}/panel/templates_path", $this->template_path ) ); } public function init() { $this->panel_template(); } private function panel_template() { if ( $this->parent->args['dev_mode'] ) { $this->template_file_check_notice(); } do_action( "redux/{$this->parent->args['opt_name']}/panel/before" ); echo '<div class="wrap"><h2></h2></div>'; echo '<div class="clear"></div>'; echo '<div class="wrap">'; echo '<noscript><div class="no-js">' . __( 'Warning- This options panel will not work properly without javascript!', 'redux-framework' ) . '</div></noscript>'; echo '<input type="hidden" id="ajaxsecurity" name="security" value="' . wp_create_nonce( 'redux_ajax_nonce' ) . '" />'; do_action( "redux-page-before-form-{$this->parent->args['opt_name']}" ); do_action( "redux/page/{$this->parent->args['opt_name']}/form/before", $this ); $this->get_template( 'container.tpl.php' ); do_action( "redux-page-after-form-{$this->parent->args['opt_name']}" ); do_action( "redux/page/{$this->parent->args['opt_name']}/form/after", $this ); echo '<div class="clear"></div>'; echo '</div>'; if ( $this->parent->args['dev_mode'] == true ) { if ( current_user_can( 'administrator' ) ) { global $wpdb; echo "<br /><pre>"; print_r( $wpdb->queries ); echo "</pre>"; } echo '<br /><div class="redux-timer">' . get_num_queries() . ' queries in ' . timer_stop( 0 ) . ' seconds<br/>Redux is currently set to developer mode.</div>'; } do_action( "redux/{$this->parent->args['opt_name']}/panel/after" ); } function notification_bar() { if ( isset( $this->parent->transients['last_save_mode'] ) ) { if ( $this->parent->transients['last_save_mode'] == "import" ) { do_action( "redux/options/{$this->parent->args['opt_name']}/import", $this, $this->parent->transients['changed_values'] ); echo '<div class="admin-notice notice-blue saved_notice"><strong>' . apply_filters( "redux-imported-text-{$this->parent->args['opt_name']}", __( 'Settings Imported!', 'redux-framework' ) ) . '</strong></div>'; } else if ( $this->parent->transients['last_save_mode'] == "defaults" ) { do_action( "redux/options/{$this->parent->args['opt_name']}/reset", $this ); echo '<div class="saved_notice admin-notice notice-yellow"><strong>' . apply_filters( "redux-defaults-text-{$this->parent->args['opt_name']}", __( 'All Defaults Restored!', 'redux-framework' ) ) . '</strong></div>'; } else if ( $this->parent->transients['last_save_mode'] == "defaults_section" ) { do_action( "redux/options/{$this->parent->args['opt_name']}/section/reset", $this ); echo '<div class="saved_notice admin-notice notice-yellow"><strong>' . apply_filters( "redux-defaults-section-text-{$this->parent->args['opt_name']}", __( 'Section Defaults Restored!', 'redux-framework' ) ) . '</strong></div>'; } else if ( $this->parent->transients['last_save_mode'] == "normal" ) { do_action( "redux/options/{$this->parent->args['opt_name']}/saved", $this->parent->options, $this->parent->transients['changed_values'] ); echo '<div class="saved_notice admin-notice notice-green">' . apply_filters( "redux-saved-text-{$this->parent->args['opt_name']}", '<strong>'.__( 'Settings Saved!', 'redux-framework' ) ).'</strong>' . '</div>'; } unset( $this->parent->transients['last_save_mode'] ); $this->parent->set_transients(); } do_action( "redux/options/{$this->parent->args['opt_name']}/settings/change", $this->parent->options, $this->parent->transients['changed_values'] ); echo '<div class="redux-save-warn notice-yellow"><strong>' . apply_filters( "redux-changed-text-{$this->parent->args['opt_name']}", __( 'Settings have changed, you should save them!', 'redux-framework' ) ) . '</strong></div>'; do_action( "redux/options/{$this->parent->args['opt_name']}/errors", $this->parent->errors ); echo '<div class="redux-field-errors notice-red"><strong><span></span> ' . __( 'error(s) were found!', 'redux-framework' ) . '</strong></div>'; do_action( "redux/options/{$this->parent->args['opt_name']}/warnings", $this->parent->warnings ); echo '<div class="redux-field-warnings notice-yellow"><strong><span></span> ' . __( 'warning(s) were found!', 'redux-framework' ) . '</strong></div>'; } function init_settings_fields() { settings_fields( "{$this->parent->args['opt_name']}_group" ); } function get_template( $file ) { if ( empty( $file ) ) { return; } if ( file_exists( $this->template_path . $file ) ) { $path = $this->template_path . $file; } else { $path = $this->original_path . $file; } do_action( "redux/{$this->parent->args['opt_name']}/panel/template/" . $file . '/before' ); $path = apply_filters( "redux/{$this->parent->args['opt_name']}/panel/template/" . $file, $path ); do_action( "redux/{$this->parent->args['opt_name']}/panel/template/" . $file . '/after' ); require $path; } public function scan_template_files( $template_path ) { $files = scandir( $template_path ); $result = array(); if ( $files ) { foreach ( $files as $key => $value ) { if ( ! in_array( $value, array( ".", ".." ) ) ) { if ( is_dir( $template_path . DIRECTORY_SEPARATOR . $value ) ) { $sub_files = self::scan_template_files( $template_path . DIRECTORY_SEPARATOR . $value ); foreach ( $sub_files as $sub_file ) { $result[] = $value . DIRECTORY_SEPARATOR . $sub_file; } } else { $result[] = $value; } } } } return $result; } public function template_file_check_notice() { if ( $this->template_path == $this->original_path ) { return; } $core_templates = $this->scan_template_files( $this->original_path ); $outdated = false; foreach ( $core_templates as $file ) { $developer_theme_file = false; if ( file_exists( $this->template_path . $file ) ) { $developer_theme_file = $this->template_path . $file; } if ( $developer_theme_file ) { $core_version = Redux_Helpers::get_template_version( $this->original_path . $file ); $developer_version = Redux_Helpers::get_template_version( $developer_theme_file ); if ( $core_version && $developer_version && version_compare( $developer_version, $core_version, '<' ) ) { ?>
                            <div id="message" class="error redux-message">
                                <p><?php _e( '<strong>Your panel has bundled outdated copies of Redux Framework template files</strong> &#8211; if you encounter functionality issues this could be the reason. Ensure you update or remove them.', 'redux-framework' ); ?></p>
                            </div>
                            <?php
 return; } } } } function output_section( $k ) { do_settings_sections( $this->parent->args['opt_name'] . $k . '_section_group' ); } } }