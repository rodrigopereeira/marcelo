<?php
 if ( ! defined( 'ABSPATH' ) ) { exit; } if ( ! class_exists( 'ReduxFramework_extension_customizer' ) ) { class ReduxFramework_extension_customizer { protected $redux; private $_extension_url; private $_extension_dir; private $parent; public static $version = "2.0"; public function __construct( $parent ) { global $pagenow; if ( ( $pagenow !== "customize.php" && $pagenow !== "admin-ajax.php" && ! isset( $GLOBALS['wp_customize'] ) ) ) { return; } $this->parent = $parent; if ( empty( $this->_extension_dir ) ) { $this->_extension_dir = trailingslashit( str_replace( '\\', '/', dirname( __FILE__ ) ) ); $this->_extension_url = site_url( str_replace( trailingslashit( str_replace( '\\', '/', ABSPATH ) ), '', $this->_extension_dir ) ); } $defaults = array(); if ( ! isset( $_POST['customized'] ) || $pagenow == "admin-ajax.php" ) { if ( current_user_can ( $this->parent->args['page_permissions'])) { add_action( 'customize_register', array($this, '_register_customizer_controls' ) ); } } if ( isset( $_POST['customized'] ) ) { if ( $pagenow == "admin-ajax.php" && $_POST['action'] == 'customize_save' ) { } add_action( "redux/options/{$this->parent->args['opt_name']}/options", array( $this, '_override_values' ), 100 ); add_action( 'customize_save', array( $this, 'customizer_save_before' ) ); add_action( 'customize_save_after', array( &$this, 'customizer_save_after' ) ); add_action( 'wp_head', array( $this, 'customize_preview_init' ) ); } } function customize_preview_init() { do_action( 'redux/customizer/live_preview' ); } public function _override_values( $data ) { if ( isset( $_POST['customized'] ) ) { $this->orig_options = $this->parent->options; $options = json_decode( stripslashes_deep( $_POST['customized'] ), true ); if( !empty( $options ) && is_array( $options ) ){ foreach ( $options as $key => $value ) { if ( strpos( $key, $this->parent->args['opt_name'] ) !== false ) { $key = str_replace( $this->parent->args['opt_name'] . '[', '', rtrim( $key, "]" ) ); $data[ $key ] = $value; $GLOBALS[ $this->parent->args['global_variable'] ][ $key ] = $value; $this->parent->options[ $key ] = $value; } } } } return $data; } public function _enqueue_new() { } public function _register_customizer_controls( $wp_customize ) { $order = array( 'heading' => - 500, 'option' => - 500, ); $defaults = array( 'default-color' => '', 'default-image' => '', 'wp-head-callback' => '', 'admin-head-callback' => '', 'admin-preview-callback' => '' ); foreach ( $this->parent->sections as $key => $section ) { if ( empty( $section['fields'] ) || ( isset( $section['type'] ) && $section['type'] == "divide" ) ) { continue; } if ( isset( $section['customizer'] ) && $section['customizer'] === false ) { continue; } if ( isset( $section['permissions'] ) ) { if ( ! current_user_can( $section['permissions'] ) ) { continue; } } if ( ! isset( $section['desc'] ) ) { $section['desc'] = ""; } if ( empty( $section['desc'] ) && ! empty( $section['subtitle'] ) ) { $section['desc'] = $section['subtitle']; } if ( empty( $section['id'] ) ) { $section['id'] = strtolower( str_replace( " ", "", $section['title'] ) ); } if ( ! isset( $section['title'] ) ) { print_r( $section ); } if ( empty( $section['priority'] ) ) { $section['priority'] = $order['heading']; $order['heading'] ++; } $wp_customize->add_section( $section['id'], array( 'title' => $section['title'], 'priority' => $section['priority'], 'description' => $section['desc'] ) ); foreach ( $section['fields'] as $skey => $option ) { if ( isset( $option['permissions'] ) ) { if ( ! current_user_can( $option['permissions'] ) ) { continue; } } if ( isset( $option['customizer'] ) && $option['customizer'] === false ) { continue; } if ( $this->parent->args['customizer'] === false && ( ! isset( $option['customizer'] ) || $option['customizer'] !== true ) ) { continue; } if ( $option['type'] != 'heading' && ! isset( $option['priority'] ) ) { $option['priority'] = $order['option']; $order['option'] ++; } if ( ! empty( $this->options_defaults[ $option['id'] ] ) ) { $option['default'] = $this->options_defaults['option']['id']; } if ( ! isset( $option['default'] ) ) { $option['default'] = ""; } if ( ! isset( $option['title'] ) ) { $option['title'] = ""; } if ( $option['type'] == "select" && isset( $option['multi'] ) && $option['multi'] == true ) { continue; } $customSetting = array( 'default' => $option['default'], 'type' => 'option', 'capabilities' => 'edit_theme_options', 'transport' => 'refresh', 'theme_supports' => '', ); $option['id'] = $this->parent->args['opt_name'] . '[' . $option['id'] . ']'; if ( $option['type'] != "heading" || ! empty( $option['type'] ) ) { $wp_customize->add_setting( $option['id'], $customSetting ); } if ( ! empty( $option['data'] ) && empty( $option['options'] ) ) { if ( empty( $option['args'] ) ) { $option['args'] = array(); } if ( $option['data'] == "elusive-icons" || $option['data'] == "elusive-icon" || $option['data'] == "elusive" ) { $icons_file = ReduxFramework::$_dir . 'inc/fields/select/elusive-icons.php'; $icons_file = apply_filters( 'redux-font-icons-file', $icons_file ); if ( file_exists( $icons_file ) ) { require_once $icons_file; } } $option['options'] = $this->parent->get_wordpress_data( $option['data'], $option['args'] ); } switch ( $option['type'] ) { case 'heading': $section = $option; $section['id'] = strtolower( str_replace( " ", "", $option['title'] ) ); $order['heading'] = - 500; if ( ! empty( $option['priority'] ) ) { $section['priority'] = $option['priority']; } else { $section['priority'] = $order['heading']; $order['heading'] ++; } break; case 'text': if ( isset( $option['data'] ) && $option['data'] ) { continue; } $wp_customize->add_control( $option['id'], array( 'label' => $option['title'], 'section' => $section['id'], 'settings' => $option['id'], 'priority' => $option['priority'], 'type' => 'text', ) ); break; case 'select': case 'button_set': if ( ( isset( $option['sortable'] ) && $option['sortable'] ) ) { continue; } $wp_customize->add_control( $option['id'], array( 'label' => $option['title'], 'section' => $section['id'], 'settings' => $option['id'], 'priority' => $option['priority'], 'type' => 'select', 'choices' => $option['options'] ) ); break; case 'radio': $wp_customize->add_control( $option['id'], array( 'label' => $option['title'], 'section' => $section['id'], 'settings' => $option['id'], 'priority' => $option['priority'], 'type' => 'radio', 'choices' => $option['options'] ) ); break; case 'checkbox': if ( ( isset( $option['data'] ) && $option['data'] ) || ( ( isset( $option['multi'] ) && $option['multi'] ) ) || ( ( isset( $option['options'] ) && ! empty( $option['options'] ) ) ) ) { continue; } $wp_customize->add_control( $option['id'], array( 'label' => $option['title'], 'section' => $section['id'], 'settings' => $option['id'], 'priority' => $option['priority'], 'type' => 'checkbox', ) ); break; case 'media': continue; $wp_customize->add_control( new WP_Customize_Image_Control( $wp_customize, $option['id'], array( 'label' => $option['title'], 'section' => $section['id'], 'settings' => $option['id'], 'priority' => $option['priority'] ) ) ); break; case 'color': $wp_customize->add_control( new WP_Customize_Color_Control( $wp_customize, $option['id'], array( 'label' => $option['title'], 'section' => $section['id'], 'settings' => $option['id'], 'priority' => $option['priority'] ) ) ); break; case 'switch': continue; $wp_customize->add_control( new Redux_customizer_switch( $wp_customize, $option['id'], array( 'label' => $option['title'], 'section' => $section['id'], 'settings' => $option['id'], 'field' => $option, 'ReduxFramework' => $this->parent, 'priority' => $option['priority'], ) ) ); break; default: break; } } } } public function customizer_save_before( $plugin_options ) { $this->before_save = $this->parent->options; } public function customizer_save_after( $wp_customize ) { $options = json_decode( stripslashes_deep( $_POST['customized'] ), true ); $compiler = false; $changed = array(); foreach ( $options as $key => $value ) { if ( strpos( $key, $this->parent->args['opt_name'] ) !== false ) { $key = str_replace( $this->parent->args['opt_name'] . '[', '', rtrim( $key, "]" ) ); if ( ! isset( $this->orig_options[ $key ] ) || $this->orig_options[ $key ] != $value || ( isset( $this->orig_options[ $key ] ) && ! empty( $this->orig_options[ $key ] ) && empty( $value ) ) ) { $changed[ $key ] = $value; if ( isset( $this->parent->compiler_fields[ $key ] ) ) { $compiler = true; } } } } if ( ! empty( $changed ) ) { setcookie( "redux-saved-{$this->parent->args['opt_name']}", 1, time() + 1000, "/" ); } if ( $compiler ) { $this->parent->no_output = true; $this->parent->_enqueue_output(); do_action( "redux/options/{$this->parent->args['opt_name']}/compiler", $this->parent->options, $this->parent->compilerCSS ); } } public function _enqueue_previewer() { wp_enqueue_script( 'redux-extension-previewer-js', $this->_extension_url . 'assets/js/preview.js' ); $localize = array( 'save_pending' => __( 'You have changes that are not saved. Would you like to save them now?', 'redux-framework' ), 'reset_confirm' => __( 'Are you sure? Resetting will lose all custom values.', 'redux-framework' ), 'preset_confirm' => __( 'Your current options will be replaced with the values of this preset. Would you like to proceed?', 'redux-framework' ), 'opt_name' => $this->args['opt_name'], 'options' => $this->parent->options, 'defaults' => $this->parent->options_defaults, ); wp_localize_script( 'redux-extension-previewer-js', 'reduxPost', $localize ); } public function _enqueue() { global $wp_styles; $localize = array( 'save_pending' => __( 'You have changes that are not saved.  Would you like to save them now?', 'redux-framework' ), 'reset_confirm' => __( 'Are you sure?  Resetting will lose all custom values.', 'redux-framework' ), 'preset_confirm' => __( 'Your current options will be replaced with the values of this preset.  Would you like to proceed?', 'redux-framework' ), 'opt_name' => $this->args['opt_name'], 'field' => $this->parent->options, 'defaults' => $this->parent->options_defaults, ); wp_localize_script( 'redux-js', 'redux_opts', $localize ); do_action( 'redux-enqueue-' . $this->args['opt_name'] ); foreach ( $this->sections as $section ) { if ( isset( $section['fields'] ) ) { foreach ( $section['fields'] as $field ) { if ( isset( $field['type'] ) ) { $field_class = 'ReduxFramework_' . $field['type']; if ( ! class_exists( $field_class ) ) { $class_file = apply_filters( 'redux-typeclass-load', $this->path . 'inc/fields/' . $field['type'] . '/field_' . $field['type'] . '.php', $field_class ); if ( $class_file ) { require_once( $class_file ); } } if ( class_exists( $field_class ) && method_exists( $field_class, 'enqueue' ) ) { $enqueue = new $field_class( '', '', $this ); $enqueue->enqueue(); } } } } } } public function _register_setting() { } public function _field_validation( $plugin_options, $two ) { echo "dovy"; echo $two; return $plugin_options; return $this->parent->_validate_options( $plugin_options ); } public function _customizer_html_output() { } } } 