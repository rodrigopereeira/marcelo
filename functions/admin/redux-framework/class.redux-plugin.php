<?php
 if ( ! defined( 'ABSPATH' ) ) { exit; } if ( ! class_exists( 'ReduxFrameworkPlugin' ) ) { class ReduxFrameworkPlugin { const VERSION = '3.4.3.9'; protected $options = array(); protected $plugin_slug = 'redux-framework'; protected $plugin_screen_hook_suffix = null; protected $plugin_network_activated = null; private static $instance; public static function instance() { if ( ! self::$instance ) { self::$instance = new self; self::$instance->get_redux_options(); self::$instance->includes(); self::$instance->hooks(); } return self::$instance; } public static function get_instance() { if ( ! self::$instance ) { self::$instance = new self; self::$instance->get_redux_options(); self::$instance->includes(); self::$instance->hooks(); } return self::$instance; } public function get_redux_options() { $defaults = array( 'demo' => false, ); if ( is_multisite() ) { $plugins = get_site_option( 'active_sitewide_plugins' ); foreach ( $plugins as $file => $plugin ) { if ( strpos( $file, 'redux-framework.php' ) !== false ) { $this->plugin_network_activated = true; $this->options = get_site_option( 'ReduxFrameworkPlugin', $defaults ); } } } if ( empty( $this->options ) ) { $this->options = get_option( 'ReduxFrameworkPlugin', $defaults ); } } public function includes() { if ( file_exists( dirname( __FILE__ ) . '/ReduxCore/framework.php' ) ) { require_once( dirname( __FILE__ ) . '/ReduxCore/framework.php' ); } if ( isset( ReduxFramework::$_as_plugin ) ) { ReduxFramework::$_as_plugin = true; } if ( file_exists( dirname( __FILE__ ) . '/ReduxCore/redux-extensions/config.php' ) ) { require_once( dirname( __FILE__ ) . '/ReduxCore/redux-extensions/config.php' ); } if ( $this->options['demo'] && file_exists( dirname( __FILE__ ) . '/sample/sample-config.php' ) ) { require_once( dirname( __FILE__ ) . '/sample/sample-config.php' ); } } private function hooks() { add_action( 'wp_loaded', array( $this, 'options_toggle_check' ) ); add_action( 'wpmu_new_blog', array( $this, 'activate_new_site' ) ); add_action( 'admin_notices', array( $this, 'admin_notices' ) ); add_filter( 'plugin_row_meta', array( $this, 'plugin_metalinks' ), null, 2 ); add_action( 'activated_plugin', array( $this, 'load_first' ) ); do_action( 'redux/plugin/hooks', $this ); } public function load_first() { $path = str_replace( WP_PLUGIN_DIR . '/', '', __FILE__ ); if ( $plugins = get_option( 'active_plugins' ) ) { if ( $key = array_search( $path, $plugins ) ) { array_splice( $plugins, $key, 1 ); array_unshift( $plugins, $path ); update_option( 'active_plugins', $plugins ); } } } public static function activate( $network_wide ) { if ( function_exists( 'is_multisite' ) && is_multisite() ) { if ( $network_wide ) { $blog_ids = self::get_blog_ids(); foreach ( $blog_ids as $blog_id ) { switch_to_blog( $blog_id ); self::single_activate(); } restore_current_blog(); } else { self::single_activate(); } } else { self::single_activate(); } delete_site_transient( 'update_plugins' ); } public static function deactivate( $network_wide ) { if ( function_exists( 'is_multisite' ) && is_multisite() ) { if ( $network_wide ) { $blog_ids = self::get_blog_ids(); foreach ( $blog_ids as $blog_id ) { switch_to_blog( $blog_id ); self::single_deactivate(); } restore_current_blog(); } else { self::single_deactivate(); } } else { self::single_deactivate(); } delete_option( 'ReduxFrameworkPlugin' ); } public function activate_new_site( $blog_id ) { if ( 1 !== did_action( 'wpmu_new_blog' ) ) { return; } switch_to_blog( $blog_id ); self::single_activate(); restore_current_blog(); } private static function get_blog_ids() { global $wpdb; $sql = "SELECT blog_id FROM $wpdb->blogs
                    WHERE archived = '0' AND spam = '0'
                    AND deleted = '0'"; return $wpdb->get_col( $sql ); } private static function single_activate() { $notices = get_option( 'ReduxFrameworkPlugin_ACTIVATED_NOTICES', array() ); $notices[] = __( 'Redux Framework has an embedded demo.', 'redux-framework' ) . ' <a href="./plugins.php?ReduxFrameworkPlugin=demo">' . __( 'Click here to activate the sample config file.', 'redux-framework' ) . '</a>'; update_option( 'ReduxFrameworkPlugin_ACTIVATED_NOTICES', $notices ); } public function admin_notices() { do_action( 'ReduxFrameworkPlugin_admin_notice' ); if ( $notices = get_option( 'ReduxFrameworkPlugin_ACTIVATED_NOTICES' ) ) { foreach ( $notices as $notice ) { echo '<div class="updated"><p>' . $notice . '</p></div>'; } delete_option( 'ReduxFrameworkPlugin_ACTIVATED_NOTICES' ); } } private static function single_deactivate() { delete_option( 'ReduxFrameworkPlugin_ACTIVATED_NOTICES' ); } public function options_toggle_check() { global $pagenow; if ( $pagenow == 'plugins.php' && is_admin() && ! empty( $_GET['ReduxFrameworkPlugin'] ) ) { $url = './plugins.php'; if ( $_GET['ReduxFrameworkPlugin'] == 'demo' ) { if ( $this->options['demo'] == false ) { $this->options['demo'] = true; } else { $this->options['demo'] = false; } } if ( is_multisite() && is_network_admin() && $this->plugin_network_activated ) { update_site_option( 'ReduxFrameworkPlugin', $this->options ); } else { update_option( 'ReduxFrameworkPlugin', $this->options ); } wp_redirect( $url ); } } public function add_action_links( $links ) { return $links; } public function plugin_metalinks( $links, $file ) { if ( strpos( $file, 'redux-framework.php' ) !== false && is_plugin_active( $file ) ) { $new_links = array( '<a href="https://github.com/ReduxFramework/redux-framework" target="_blank">' . __( 'Repo', 'redux-framework' ) . '</a>', '<a href="http://generate.reduxframework.com/" target="_blank">' . __( 'Generator', 'redux-framework' ) . '</a>', '<a href="https://github.com/ReduxFramework/redux-framework/issues/" target="_blank">' . __( 'Issues', 'redux-framework' ) . '</a>', '<a href="http://docs.reduxframework.com/" target="_blank">' . __( 'Documentation', 'redux-framework' ) . '</a>', ); if ( ( is_multisite() && $this->plugin_network_activated ) || ! is_network_admin() || ! is_multisite() ) { if ( $this->options['demo'] ) { $new_links[3] .= '<br /><span style="display: block; padding-top: 6px;"><a href="./plugins.php?ReduxFrameworkPlugin=demo" style="color: #bc0b0b;">' . __( 'Deactivate Demo Mode', 'redux-framework' ) . '</a></span>'; } else { $new_links[3] .= '<br /><span style="display: block; padding-top: 6px;"><a href="./plugins.php?ReduxFrameworkPlugin=demo" style="color: #bc0b0b;">' . __( 'Activate Demo Mode', 'redux-framework' ) . '</a></span>'; } } $links = array_merge( $links, $new_links ); } return $links; } } } 