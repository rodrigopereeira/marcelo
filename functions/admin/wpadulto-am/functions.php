<?php
 if ( get_option( 'api_manager_foxtemas_activated' ) != 'Activated' ) { add_action( 'admin_notices', 'API_Manager_FoxTemas::am_foxtemas_inactive_notice' ); } class API_Manager_FoxTemas { public $upgrade_url = 'http://www.wpadulto.com/'; public $api_manager_foxtemas_version_name = 'api_manager_foxtemas_version'; public $theme_url; public $version; private $my_theme; public $text_domain = 'api-manager-foxtemas'; private $ame_software_product_id; public $ame_data_key; public $ame_api_key; public $ame_activation_email; public $ame_product_id_key; public $ame_instance_key; public $ame_deactivate_checkbox_key; public $ame_activated_key; public $ame_deactivate_checkbox; public $ame_activation_tab_key; public $ame_deactivation_tab_key; public $ame_settings_menu_title; public $ame_settings_title; public $ame_menu_tab_activation_title; public $ame_menu_tab_deactivation_title; public $ame_options; public $ame_plugin_name; public $ame_product_id; public $ame_renew_license_url; public $ame_instance_id; public $ame_domain; public $ame_software_version; public $ame_plugin_or_theme; public $ame_update_version; public $ame_update_check = 'am_foxtemas_update_check'; public $api_manager_foxtemas_key; public $ame_extra; protected static $_instance = null; public static function instance() { if ( is_null( self::$_instance ) ) { self::$_instance = new self(); } return self::$_instance; } public function __clone() { _doing_it_wrong( __FUNCTION__, __( 'Cheatin&#8217; huh?', 'api-manager-foxtemas' ), '1.2' ); } public function __wakeup() { _doing_it_wrong( __FUNCTION__, __( 'Cheatin&#8217; huh?', 'api-manager-foxtemas' ), '1.2' ); } public function __construct() { if ( is_admin() ) { add_action( 'admin_notices', array( $this, 'check_external_blocking' ) ); add_action( 'admin_init', array( $this, 'activation' ) ); $this->my_theme = wp_get_theme(); $this->version = $this->my_theme->get( 'Version' ); $this->ame_data_key = 'api_manager_theme_example'; $this->ame_api_key = 'api_key'; $this->ame_activation_email = 'activation_email'; $this->ame_product_id_key = 'api_manager_foxtemas_product_id'; $this->ame_instance_key = 'api_manager_foxtemas_instance'; $this->ame_deactivate_checkbox_key = 'api_manager_foxtemas_deactivate_checkbox'; $this->ame_activated_key = 'api_manager_foxtemas_activated'; $this->ame_deactivate_checkbox = 'am_deactivate_foxtemas_checkbox'; $this->ame_activation_tab_key = 'api_manager_foxtemas_dashboard'; $this->ame_deactivation_tab_key = 'api_manager_foxtemas_deactivation'; $this->ame_settings_menu_title = 'Registrar Tema'; $this->ame_settings_title = 'Registrar Tema com Licença'; $this->ame_menu_tab_activation_title = __( 'Ativar Licença', 'api-manager-foxtemas' ); $this->ame_menu_tab_deactivation_title = __( 'Desativar Licença', 'api-manager-foxtemas' ); $this->ame_options = get_option( $this->ame_data_key ); $this->ame_plugin_name = get_stylesheet(); $this->ame_product_id = trim( $this->my_theme->get( 'Name' ) ); $this->ame_renew_license_url = 'http://www.wpadulto.com/minha-conta'; $this->ame_instance_id = get_option( $this->ame_instance_key ); $this->ame_domain = str_ireplace( array( 'http://', 'https://' ), '', home_url() ); $this->ame_software_version = $this->version; $this->ame_plugin_or_theme = 'theme'; $this->ame_software_product_id = __( $this->ame_product_id, 'api-manager-foxtemas' ); require_once( 'am/classes/class-wc-key-api.php' ); $this->api_manager_foxtemas_key = new Api_Manager_FoxTemas_Key(); require_once( 'am/classes/class-wc-plugin-update.php' ); require_once( 'am/admin/class-wc-api-manager-menu.php' ); $options = get_option( $this->ame_data_key ); if ( ! empty( $options ) && $options !== false ) { $this->update_check( $this->upgrade_url, $this->ame_plugin_name, $this->ame_product_id, $this->ame_options[$this->ame_api_key], $this->ame_options[$this->ame_activation_email], $this->ame_renew_license_url, $this->ame_instance_id, $this->ame_domain, $this->ame_software_version, $this->ame_plugin_or_theme, $this->text_domain ); } add_action( 'switch_theme', array( $this, 'uninstall' ) ); } } public function update_check( $upgrade_url, $plugin_name, $product_id, $api_key, $activation_email, $renew_license_url, $instance, $domain, $software_version, $plugin_or_theme, $text_domain, $extra = '' ) { return API_Manager_FoxTemas_Update_API_Check::instance( $upgrade_url, $plugin_name, $product_id, $api_key, $activation_email, $renew_license_url, $instance, $domain, $software_version, $plugin_or_theme, $text_domain, $extra ); } public function theme_url() { if ( isset( $this->theme_url ) ) { return $this->theme_url; } return $this->theme_url = get_stylesheet_directory_uri() . '/functions/admin/wpadulto-am/'; } public function activation() { if ( get_option( $this->ame_data_key ) === false || get_option( $this->ame_instance_key ) === false ) { global $wpdb; $global_options = array( $this->ame_api_key => '', $this->ame_activation_email => '', ); update_option( $this->ame_data_key, $global_options ); require_once( 'am/classes/class-wc-api-manager-passwords.php' ); $api_manager_foxtemas_password_management = new API_Manager_FoxTemas_Password_Management(); $instance = $api_manager_foxtemas_password_management->generate_password( 12, false ); $single_options = array( $this->ame_product_id_key => $this->ame_software_product_id, $this->ame_instance_key => $instance, $this->ame_deactivate_checkbox_key => 'on', $this->ame_activated_key => 'Deactivated', ); foreach ( $single_options as $key => $value ) { update_option( $key, $value ); } $curr_ver = get_option( $this->api_manager_foxtemas_version_name ); if ( version_compare( $this->version, $curr_ver, '>' ) ) { update_option( $this->api_manager_foxtemas_version_name, $this->version ); } } } public function uninstall() { global $wpdb, $blog_id; $this->license_key_deactivation(); if ( is_multisite() ) { switch_to_blog( $blog_id ); foreach ( array( $this->ame_data_key, $this->ame_product_id_key, $this->ame_instance_key, $this->ame_deactivate_checkbox_key, $this->ame_activated_key, ) as $option) { delete_option( $option ); } restore_current_blog(); } else { foreach ( array( $this->ame_data_key, $this->ame_product_id_key, $this->ame_instance_key, $this->ame_deactivate_checkbox_key, $this->ame_activated_key ) as $option) { delete_option( $option ); } } } public function license_key_deactivation() { $activation_status = get_option( $this->ame_activated_key ); $api_email = $this->ame_options[$this->ame_activation_email]; $api_key = $this->ame_options[$this->ame_api_key]; $args = array( 'email' => $api_email, 'licence_key' => $api_key, ); if ( $activation_status == 'Activated' && $api_key != '' && $api_email != '' ) { $this->api_manager_foxtemas_key->deactivate( $args ); } } public static function am_foxtemas_inactive_notice() { ?>
		<?php if ( ! current_user_can( 'manage_options' ) ) return; ?>
		<?php if ( isset( $_GET['page'] ) && 'api_manager_foxtemas_dashboard' == $_GET['page'] ) return; ?>
		<div id="message" class="error">
			<p><?php printf( __( 'Não há licença registrada no seu tema, então seu tema está inativo . %sClique aqui%s para ativar uma licença e registrar seu tema.', 'api-manager-foxtemas' ), '<a href="' . esc_url( admin_url( 'themes.php?page=api_manager_foxtemas_dashboard' ) ) . '">', '</a>' ); ?></p>
		</div>
		<?php
 } public function check_external_blocking() { if( defined( 'WP_HTTP_BLOCK_EXTERNAL' ) && WP_HTTP_BLOCK_EXTERNAL === true ) { $host = parse_url( $this->upgrade_url, PHP_URL_HOST ); if( ! defined( 'WP_ACCESSIBLE_HOSTS' ) || stristr( WP_ACCESSIBLE_HOSTS, $host ) === false ) { ?>
				<div class="error">
					<p><?php printf( __( '<b>Atenção!</b> Você está bloqueado para requisições externas, significa que você não poderá receber atualizações do %s. Por favor adicione ao %s o %s.', 'api-manager-foxtemas' ), $this->ame_product_id, '<strong>' . $host . '</strong>', '<code>WP_ACCESSIBLE_HOSTS</code>'); ?></p>
				</div>
				<?php
 } } } } function AMET() { return API_Manager_FoxTemas::instance(); } AMET(); 