<?php
 if( ! class_exists('acf_field_user') ) : class acf_field_user extends acf_field { function __construct() { $this->name = 'user'; $this->label = __("User",'acf'); $this->category = 'relational'; $this->defaults = array( 'role' => '', 'multiple' => 0, 'allow_null' => 0, ); add_action('wp_ajax_acf/fields/user/query', array($this, 'ajax_query')); add_action('wp_ajax_nopriv_acf/fields/user/query', array($this, 'ajax_query')); parent::__construct(); } function get_choices( $options = array() ) { $options = acf_parse_args($options, array( 'post_id' => 0, 's' => '', 'field_key' => '', )); $r = array(); $args = array(); $field = acf_get_field( $options['field_key'] ); if( !$field ) { return false; } $editable_roles = get_editable_roles(); if( !empty($field['role']) ) { foreach( $editable_roles as $role => $role_info ) { if( !in_array($role, $field['role']) ) { unset( $editable_roles[ $role ] ); } } } if( $options['s'] ) { $args['search'] = '*' . $options['s'] . '*'; $this->field = $field; add_filter('user_search_columns', array($this, 'user_search_columns'), 10, 3); } $args = apply_filters("acf/fields/user/query", $args, $field, $options['post_id']); $args = apply_filters("acf/fields/user/query/name={$field['_name']}", $args, $field, $options['post_id']); $args = apply_filters("acf/fields/user/query/key={$field['key']}", $args, $field, $options['post_id']); $users = get_users( $args ); if( !empty($users) && !empty($editable_roles) ) { foreach( $editable_roles as $role => $role_info ) { $this_users = array(); $this_json = array(); foreach( array_keys($users) as $key ) { if( in_array($role, $users[ $key ]->roles) ) { $user = acf_extract_var( $users, $key ); $this_users[ $user->ID ] = $this->get_result( $user, $field, $options['post_id'] ); } } if( empty($this_users) ) { continue; } if( !empty($args['s']) ) { $this_users = acf_order_by_search( $this_users, $args['s'] ); } foreach( array_keys($this_users) as $user_id ) { $this_json[] = array( 'id' => $user_id, 'text' => $this_users[ $user_id ] ); } if( count($editable_roles) == 1 ) { $r = $this_json; } else { $r[] = array( 'text' => translate_user_role( $role_info['name'] ), 'children' => $this_json ); } } } return $r; } function ajax_query() { if( !acf_verify_ajax() ) { die(); } $choices = $this->get_choices( $_POST ); if( !$choices ) { die(); } echo json_encode( $choices ); die(); } function get_result( $user, $field, $post_id = 0 ) { if( !$post_id ) { $post_id = acf_get_setting('form_data/post_id', get_the_ID()); } $result = $user->user_login; if( $user->first_name ) { $result .= ' (' . $user->first_name; if( $user->last_name ) { $result .= ' ' . $user->last_name; } $result .= ')'; } $result = apply_filters("acf/fields/user/result", $result, $user, $field, $post_id); $result = apply_filters("acf/fields/user/result/name={$field['_name']}", $result, $user, $field, $post_id); $result = apply_filters("acf/fields/user/result/key={$field['key']}", $result, $user, $field, $post_id); return $result; } function user_search_columns( $columns, $search, $WP_User_Query ) { if( empty($this->field) ) { return $columns; } $field = $this->field; $columns = apply_filters("acf/fields/user/search_columns", $columns, $search, $WP_User_Query, $field); $columns = apply_filters("acf/fields/user/search_columns/name={$field['_name']}", $columns, $search, $WP_User_Query, $field); $columns = apply_filters("acf/fields/user/search_columns/key={$field['key']}", $columns, $search, $WP_User_Query, $field); return $columns; } function render_field( $field ) { $field['type'] = 'select'; $field['ui'] = 1; $field['ajax'] = 1; $field['choices'] = array(); if( !empty($field['value']) ) { $field['value'] = acf_get_array( $field['value'] ); $field['value'] = array_map('intval', $field['value']); $users = get_users(array( 'include' => $field['value'] )); if( !empty($users) ) { foreach( $users as $user ) { $field['choices'][ $user->ID ] = $this->get_result( $user, $field ); } } } acf_render_field( $field ); } function render_field_settings( $field ) { $choices = array(); $editable_roles = get_editable_roles(); foreach( $editable_roles as $role => $details ) { $choices[ $role ] = translate_user_role( $details['name'] ); } acf_render_field_setting( $field, array( 'label' => __('Filter by role','acf'), 'instructions' => '', 'type' => 'select', 'name' => 'role', 'choices' => $choices, 'multiple' => 1, 'ui' => 1, 'allow_null' => 1, 'placeholder' => __("All user roles",'acf'), )); acf_render_field_setting( $field, array( 'label' => __('Allow Null?','acf'), 'instructions' => '', 'type' => 'radio', 'name' => 'allow_null', 'choices' => array( 1 => __("Yes",'acf'), 0 => __("No",'acf'), ), 'layout' => 'horizontal', )); acf_render_field_setting( $field, array( 'label' => __('Select multiple values?','acf'), 'instructions' => '', 'type' => 'radio', 'name' => 'multiple', 'choices' => array( 1 => __("Yes",'acf'), 0 => __("No",'acf'), ), 'layout' => 'horizontal', )); } function update_value( $value, $post_id, $field ) { if( is_array($value) && isset($value['ID']) ) { $value = $value['ID']; } if( is_object($value) && isset($value->ID) ) { $value = $value->ID; } return $value; } function load_value( $value, $post_id, $field ) { if( $value === 'null' ) { return false; } return $value; } function format_value( $value, $post_id, $field ) { if( empty($value) ) { return $value; } $value = acf_get_array( $value ); $value = array_map('intval', $value); foreach( array_keys($value) as $i ) { $user_id = $value[ $i ]; $user_data = get_userdata( $user_id ); if( !is_object($user_data) ) { unset( $value[ $i ] ); continue; } $value[ $i ] = array(); $value[ $i ]['ID'] = $user_id; $value[ $i ]['user_firstname'] = $user_data->user_firstname; $value[ $i ]['user_lastname'] = $user_data->user_lastname; $value[ $i ]['nickname'] = $user_data->nickname; $value[ $i ]['user_nicename'] = $user_data->user_nicename; $value[ $i ]['display_name'] = $user_data->display_name; $value[ $i ]['user_email'] = $user_data->user_email; $value[ $i ]['user_url'] = $user_data->user_url; $value[ $i ]['user_registered'] = $user_data->user_registered; $value[ $i ]['user_description'] = $user_data->user_description; $value[ $i ]['user_avatar'] = get_avatar( $user_id ); } if( !$field['multiple'] ) { $value = array_shift($value); } return $value; } } new acf_field_user(); endif; ?>
