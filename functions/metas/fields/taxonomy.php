<?php
 if( ! class_exists('acf_field_taxonomy') ) : class acf_field_taxonomy extends acf_field { function __construct() { $this->name = 'taxonomy'; $this->label = __("Taxonomy",'acf'); $this->category = 'relational'; $this->defaults = array( 'taxonomy' => 'category', 'field_type' => 'checkbox', 'multiple' => 0, 'allow_null' => 0, 'return_format' => 'id', 'add_term' => 1, 'load_terms' => 0, 'save_terms' => 0 ); add_action('wp_ajax_acf/fields/taxonomy/query', array($this, 'ajax_query')); add_action('wp_ajax_nopriv_acf/fields/taxonomy/query', array($this, 'ajax_query')); add_action('wp_ajax_acf/fields/taxonomy/add_term', array($this, 'ajax_add_term')); parent::__construct(); } function get_choices( $options = array() ) { $options = acf_parse_args($options, array( 'post_id' => 0, 's' => '', 'field_key' => '', )); $r = array(); $args = array( 'hide_empty' => false ); $field = acf_get_field( $options['field_key'] ); if( !$field ) { return false; } if( $options['s'] ) { $args['search'] = $options['s']; } $args = apply_filters('acf/fields/taxonomy/query', $args, $field, $options['post_id']); $args = apply_filters('acf/fields/taxonomy/query/name=' . $field['name'], $args, $field, $options['post_id'] ); $args = apply_filters('acf/fields/taxonomy/query/key=' . $field['key'], $args, $field, $options['post_id'] ); $terms = get_terms( $field['taxonomy'], $args ); if( is_taxonomy_hierarchical( $field['taxonomy'] ) ) { $parent = acf_maybe_get( $args, 'parent', 0 ); $parent = acf_maybe_get( $args, 'child_of', $parent ); if( empty($args['search']) ) { $terms = _get_term_children( $parent, $terms, $field['taxonomy'] ); } } foreach( $terms as $term ) { $r[] = array( 'id' => $term->term_id, 'text' => $this->get_term_title( $term, $field, $options['post_id'] ) ); } return $r; } function ajax_query() { if( !acf_verify_ajax() ) { die(); } $choices = $this->get_choices( $_POST ); if( !$choices ) { die(); } echo json_encode( $choices ); die(); } function get_term_title( $term, $field, $post_id = 0 ) { if( !$post_id ) { $form_data = acf_get_setting('form_data'); if( !empty($form_data['post_id']) ) { $post_id = $form_data['post_id']; } else { $post_id = get_the_ID(); } } $title = ''; $ancestors = get_ancestors( $term->term_id, $field['taxonomy'] ); if( !empty($ancestors) ) { $title .= str_repeat('- ', count($ancestors)); } $title .= $term->name; $title = apply_filters('acf/fields/taxonomy/result', $title, $term, $field, $post_id); $title = apply_filters('acf/fields/taxonomy/result/name=' . $field['_name'] , $title, $term, $field, $post_id); $title = apply_filters('acf/fields/taxonomy/result/key=' . $field['key'], $title, $term, $field, $post_id); return $title; } function get_terms( $value, $taxonomy = 'category' ) { if( count($value) > 1 ) { $terms = get_terms($taxonomy, array( 'hide_empty' => false, 'include' => $value, )); } foreach( array_keys($value) as $i ) { $value[ $i ] = get_term( $value[ $i ], $taxonomy ); } $value = array_filter($value); return $value; } function load_value( $value, $post_id, $field ) { $value = acf_get_valid_terms($value, $field['taxonomy']); if( $field['load_terms'] ) { $term_ids = wp_get_object_terms($post_id, $field['taxonomy'], array('fields' => 'ids', 'orderby' => 'none')); if( is_wp_error($term_ids) ) { return false; } return $term_ids; } return $value; } function update_value( $value, $post_id, $field ) { if( is_array($value) ) { $value = array_filter($value); } if( $field['save_terms'] ) { $taxonomy = $field['taxonomy']; $term_ids = acf_get_array( $value ); $term_ids = array_map('intval', $term_ids); if( !did_action('acf/save_post') ) { wp_set_object_terms( $post_id, $term_ids, $taxonomy, false ); return $value; } if( empty($this->set_terms) ) { $this->set_terms = array(); add_action('acf/save_post', array($this, 'set_terms'), 15, 1); } if( empty($this->set_terms[ $taxonomy ]) ) { $this->set_terms[ $taxonomy ] = array(); } $this->set_terms[ $taxonomy ] = array_merge($this->set_terms[ $taxonomy ], $term_ids); } return $value; } function set_terms( $post_id ) { if( empty($this->set_terms) ) { return; } foreach( $this->set_terms as $taxonomy => $term_ids ){ wp_set_object_terms( $post_id, $term_ids, $taxonomy, false ); } $this->set_terms = array(); } function format_value( $value, $post_id, $field ) { if( empty($value) ) { return $value; } $value = acf_get_array( $value ); $value = array_map('intval', $value); if( $field['return_format'] == 'object' ) { $value = $this->get_terms( $value, $field["taxonomy"] ); } if( $field['field_type'] == 'select' || $field['field_type'] == 'radio' ) { $value = array_shift($value); } return $value; } function render_field( $field ) { $field['value'] = acf_get_array( $field['value'] ); $field['value'] = array_map('intval', $field['value']); $div = array( 'class' => 'acf-taxonomy-field acf-soh', 'data-save' => $field['save_terms'], 'data-type' => $field['field_type'], 'data-taxonomy' => $field['taxonomy'] ); $taxonomy = get_taxonomy( $field['taxonomy'] ); ?>
<div <?php acf_esc_attr_e($div); ?>>
	<?php if( $field['add_term'] && current_user_can( $taxonomy->cap->manage_terms) ): ?>
	<a href="#" class="acf-icon acf-icon-plus acf-js-tooltip small acf-soh-target" data-name="add" title="<?php echo sprintf( __('Add new %s ', 'acf'), $taxonomy->labels->singular_name ); ?>"></a>
	<?php endif; if( $field['field_type'] == 'select' ) { $field['multiple'] = 0; $this->render_field_select( $field ); } elseif( $field['field_type'] == 'multi_select' ) { $field['multiple'] = 1; $this->render_field_select( $field ); } elseif( $field['field_type'] == 'radio' ) { $this->render_field_checkbox( $field ); } elseif( $field['field_type'] == 'checkbox' ) { $this->render_field_checkbox( $field ); } ?>
</div><?php
 } function render_field_select( $field ) { $field['type'] = 'select'; $field['ui'] = 1; $field['ajax'] = 1; $field['choices'] = array(); if( !empty($field['value']) ) { $terms = $this->get_terms( $field['value'], $field['taxonomy'] ); if( !empty($terms) ) { foreach( array_keys($terms) as $i ) { $term = acf_extract_var( $terms, $i ); $field['choices'][ $term->term_id ] = $this->get_term_title( $term, $field ); } } } acf_render_field( $field ); } function render_field_checkbox( $field ) { acf_hidden_input(array( 'type' => 'hidden', 'name' => $field['name'], )); if( $field['field_type'] == 'checkbox' ) { $field['name'] .= '[]'; } $taxonomy_obj = get_taxonomy($field['taxonomy']); $args = array( 'taxonomy' => $field['taxonomy'], 'show_option_none' => __('No', 'acf') . ' ' . $taxonomy_obj->labels->name, 'hide_empty' => false, 'style' => 'none', 'walker' => new acf_taxonomy_field_walker( $field ), ); $args = apply_filters('acf/fields/taxonomy/wp_list_categories', $args, $field); $args = apply_filters('acf/fields/taxonomy/wp_list_categories/name=' . $field['_name'], $args, $field); $args = apply_filters('acf/fields/taxonomy/wp_list_categories/key=' . $field['key'], $args, $field); ?><div class="categorychecklist-holder">
		
			<ul class="acf-checkbox-list acf-bl">
			
				<?php if( $field['field_type'] == 'radio' && $field['allow_null'] ): ?>
					<li>
						<label class="selectit">
							<input type="radio" name="<?php echo $field['name']; ?>" value="" /> <?php _e("None", 'acf'); ?>
						</label>
					</li>
				<?php endif; ?>
				
				<?php wp_list_categories( $args ); ?>
		
			</ul>
			
		</div><?php
 } function render_field_settings( $field ) { acf_render_field_setting( $field, array( 'label' => __('Taxonomy','acf'), 'instructions' => __('Select the taxonomy to be displayed','acf'), 'type' => 'select', 'name' => 'taxonomy', 'choices' => acf_get_taxonomies(), )); acf_render_field_setting( $field, array( 'label' => __('Appearance','acf'), 'instructions' => __('Select the appearance of this field','acf'), 'type' => 'select', 'name' => 'field_type', 'optgroup' => true, 'choices' => array( __("Multiple Values",'acf') => array( 'checkbox' => __('Checkbox', 'acf'), 'multi_select' => __('Multi Select', 'acf') ), __("Single Value",'acf') => array( 'radio' => __('Radio Buttons', 'acf'), 'select' => __('Select', 'acf') ) ) )); acf_render_field_setting( $field, array( 'label' => __('Allow Null?','acf'), 'instructions' => '', 'type' => 'radio', 'name' => 'allow_null', 'choices' => array( 1 => __("Yes",'acf'), 0 => __("No",'acf'), ), 'layout' => 'horizontal', )); acf_render_field_setting( $field, array( 'label' => __('Create Terms','acf'), 'instructions' => __('Allow new terms to be created whilst editing','acf'), 'type' => 'radio', 'name' => 'add_term', 'choices' => array( 1 => __("Yes",'acf'), 0 => __("No",'acf'), ), 'layout' => 'horizontal', )); acf_render_field_setting( $field, array( 'label' => __('Save Terms','acf'), 'instructions' => __('Connect selected terms to the post','acf'), 'type' => 'radio', 'name' => 'save_terms', 'choices' => array( 1 => __("Yes",'acf'), 0 => __("No",'acf'), ), 'layout' => 'horizontal', )); acf_render_field_setting( $field, array( 'label' => __('Load Terms','acf'), 'instructions' => __('Load value from posts terms','acf'), 'type' => 'radio', 'name' => 'load_terms', 'choices' => array( 1 => __("Yes",'acf'), 0 => __("No",'acf'), ), 'layout' => 'horizontal', )); acf_render_field_setting( $field, array( 'label' => __('Return Value','acf'), 'instructions' => '', 'type' => 'radio', 'name' => 'return_format', 'choices' => array( 'object' => __("Term Object",'acf'), 'id' => __("Term ID",'acf') ), 'layout' => 'horizontal', )); } function ajax_add_term() { $args = acf_parse_args($_POST, array( 'nonce' => '', 'field_key' => '', 'term_name' => '', 'term_parent' => '' )); if( ! wp_verify_nonce($args['nonce'], 'acf_nonce') ) { die(); } $field = acf_get_field( $args['field_key'] ); if( !$field ) { die(); } $taxonomy_obj = get_taxonomy($field['taxonomy']); $taxonomy_label = $taxonomy_obj->labels->singular_name; if( !current_user_can( $taxonomy_obj->cap->manage_terms) ) { echo '<p><strong>' . __("Error", 'acf') . '.</strong> ' . sprintf( __('User unable to add new %s', 'acf'), $taxonomy_label ) . '</p>'; die; } if( $args['term_name'] ) { if( term_exists($args['term_name'], $field['taxonomy']) ) { wp_send_json_error(array( 'error' => sprintf( __('%s already exists', 'acf'), $taxonomy_label ) )); } $extra = array(); if( $args['term_parent'] ) { $extra['parent'] = $args['term_parent']; } $data = wp_insert_term( $args['term_name'], $field['taxonomy'], $extra ); if( is_wp_error($data) ) { wp_send_json_error(array( 'error' => $data->get_error_message() )); } $prefix = ''; $ancestors = get_ancestors( $data['term_id'], $field['taxonomy'] ); if( !empty($ancestors) ) { $prefix = str_repeat('- ', count($ancestors)); } wp_send_json_success(array( 'message' => sprintf( __('%s added', 'acf'), $taxonomy_label ), 'term_id' => $data['term_id'], 'term_name' => $args['term_name'], 'term_label' => $prefix . $args['term_name'], 'term_parent' => $args['term_parent'] )); } ?><form method="post"><?php
 acf_render_field_wrap(array( 'label' => 'Name', 'name' => 'term_name', 'type' => 'text' )); if( is_taxonomy_hierarchical( $field['taxonomy'] ) ) { $choices = array(); $choices2 = $this->get_choices(array( 'field_key' => $field['key'] )); if( $choices2 ) { foreach( $choices2 as $v) { $choices[ $v['id'] ] = $v['text']; } } acf_render_field_wrap(array( 'label' => 'Parent', 'name' => 'term_parent', 'type' => 'select', 'allow_null' => 1, 'ui' => 0, 'choices' => $choices )); } ?><p class="acf-submit"><button class="acf-button blue" type="submit"><?php _e("Add", 'acf'); ?></button><i class="acf-spinner"></i><span></span></p></form><?php
 die; } } new acf_field_taxonomy(); endif; if( ! class_exists('acf_taxonomy_field_walker') ) : class acf_taxonomy_field_walker extends Walker { var $field = null, $tree_type = 'category', $db_fields = array ( 'parent' => 'parent', 'id' => 'term_id' ); function __construct( $field ) { $this->field = $field; } function start_el( &$output, $term, $depth = 0, $args = array(), $current_object_id = 0) { $selected = in_array( $term->term_id, $this->field['value'] ); $output .= '<li data-id="' . $term->term_id . '"><label><input type="' . $this->field['field_type'] . '" name="' . $this->field['name'] . '" value="' . $term->term_id . '" ' . ($selected ? 'checked="checked"' : '') . ' /> <span>' . $term->name . '</span></label>'; } function end_el( &$output, $term, $depth = 0, $args = array() ) { $output .= '</li>' . "\n"; } function start_lvl( &$output, $depth = 0, $args = array() ) { $output .= '<ul class="children acf-bl">' . "\n"; } function end_lvl( &$output, $depth = 0, $args = array() ) { $output .= '</ul>' . "\n"; } } endif; ?>
