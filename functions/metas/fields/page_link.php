<?php
 if( ! class_exists('acf_field_page_link') ) : class acf_field_page_link extends acf_field { function __construct() { $this->name = 'page_link'; $this->label = __("Page Link",'acf'); $this->category = 'relational'; $this->defaults = array( 'post_type' => array(), 'taxonomy' => array(), 'allow_null' => 0, 'multiple' => 0, ); add_action('wp_ajax_acf/fields/page_link/query', array($this, 'ajax_query')); add_action('wp_ajax_nopriv_acf/fields/page_link/query', array($this, 'ajax_query')); parent::__construct(); } function get_choices( $options = array() ) { $options = acf_parse_args($options, array( 'post_id' => 0, 's' => '', 'lang' => false, 'field_key' => '', 'paged' => 1 )); $r = array(); $args = array(); $args['posts_per_page'] = 20; $args['paged'] = $options['paged']; $field = acf_get_field( $options['field_key'] ); if( !$field ) { return false; } if( !empty($field['post_type']) ) { $args['post_type'] = acf_get_array( $field['post_type'] ); } else { $args['post_type'] = acf_get_post_types(); } if( !empty($field['taxonomy']) ) { $args['tax_query'] = array(); $taxonomies = acf_decode_taxonomy_terms( $field['taxonomy'] ); foreach( $taxonomies as $taxonomy => $terms ) { $args['tax_query'][] = array( 'taxonomy' => $taxonomy, 'field' => 'slug', 'terms' => $terms, ); } } if( $options['s'] ) { $args['s'] = $options['s']; } $args = apply_filters('acf/fields/page_link/query', $args, $field, $options['post_id']); $args = apply_filters('acf/fields/page_link/query/name=' . $field['name'], $args, $field, $options['post_id'] ); $args = apply_filters('acf/fields/page_link/query/key=' . $field['key'], $args, $field, $options['post_id'] ); if( $args['paged'] == 1 ) { $archives = array(); $archives[] = array( 'id' => home_url(), 'text' => home_url() ); foreach( $args['post_type'] as $post_type ) { $archive_link = get_post_type_archive_link( $post_type ); if( $archive_link ) { $archives[] = array( 'id' => $archive_link, 'text' => $archive_link ); } } if( !empty($args['s']) ) { foreach( array_keys($archives) as $i ) { if( strpos( $archives[$i]['text'], $args['s'] ) === false ) { unset($archives[$i]); } } $archives = array_values($archives); } if( !empty($archives) ) { $r[] = array( 'text' => __('Archives', 'acf'), 'children' => $archives ); } } $groups = acf_get_grouped_posts( $args ); if( !empty($groups) ) { foreach( array_keys($groups) as $group_title ) { $posts = acf_extract_var( $groups, $group_title ); $titles = array(); $data = array( 'text' => $group_title, 'children' => array() ); foreach( array_keys($posts) as $post_id ) { $posts[ $post_id ] = $this->get_post_title( $posts[ $post_id ], $field, $options['post_id'] ); }; if( !empty($args['s']) ) { $posts = acf_order_by_search( $posts, $args['s'] ); } foreach( array_keys($posts) as $post_id ) { $data['children'][] = array( 'id' => $post_id, 'text' => $posts[ $post_id ] ); } $r[] = $data; } } return $r; } function ajax_query() { if( !acf_verify_ajax() ) { die(); } $choices = $this->get_choices( $_POST ); if( !$choices ) { die(); } echo json_encode( $choices ); die(); } function get_post_title( $post, $field, $post_id = 0 ) { if( !$post_id ) { $form_data = acf_get_setting('form_data'); if( !empty($form_data['post_id']) ) { $post_id = $form_data['post_id']; } else { $post_id = get_the_ID(); } } $title = acf_get_post_title( $post ); $title = apply_filters('acf/fields/page_link/result', $title, $post, $field, $post_id); $title = apply_filters('acf/fields/page_link/result/name=' . $field['_name'], $title, $post, $field, $post_id); $title = apply_filters('acf/fields/page_link/result/key=' . $field['key'], $title, $post, $field, $post_id); return $title; } function get_posts( $value, $field ) { $value = acf_get_array( $value ); $post__in = array(); foreach( $value as $k => $v ) { if( is_numeric($v) ) { $post__in[] = (int) $v; } } if( empty($post__in) ) { return $value; } $posts = acf_get_posts(array( 'post__in' => $post__in, 'post_type' => $field['post_type'] )); $return = array(); foreach( $value as $k => $v ) { if( is_numeric($v) ) { $post = array_shift( $posts ); if( $post ) { $return[] = $post; } } else { $return[] = $v; } } return $return; } function render_field( $field ){ $field['type'] = 'select'; $field['ui'] = 1; $field['ajax'] = 1; $field['choices'] = array(); if( !empty($field['value']) ) { $posts = $this->get_posts( $field['value'], $field ); if( !empty($posts) ) { foreach( array_keys($posts) as $i ) { $post = acf_extract_var( $posts, $i ); if( is_object($post) ) { $field['choices'][ $post->ID ] = $this->get_post_title( $post, $field ); } else { $field['choices'][ $post ] = $post; } } } } acf_render_field( $field ); } function render_field_settings( $field ) { acf_render_field_setting( $field, array( 'label' => __('Filter by Post Type','acf'), 'instructions' => '', 'type' => 'select', 'name' => 'post_type', 'choices' => acf_get_pretty_post_types(), 'multiple' => 1, 'ui' => 1, 'allow_null' => 1, 'placeholder' => __("All post types",'acf'), )); acf_render_field_setting( $field, array( 'label' => __('Filter by Taxonomy','acf'), 'instructions' => '', 'type' => 'select', 'name' => 'taxonomy', 'choices' => acf_get_taxonomy_terms(), 'multiple' => 1, 'ui' => 1, 'allow_null' => 1, 'placeholder' => __("All taxonomies",'acf'), )); acf_render_field_setting( $field, array( 'label' => __('Allow Null?','acf'), 'instructions' => '', 'type' => 'radio', 'name' => 'allow_null', 'choices' => array( 1 => __("Yes",'acf'), 0 => __("No",'acf'), ), 'layout' => 'horizontal', )); acf_render_field_setting( $field, array( 'label' => __('Select multiple values?','acf'), 'instructions' => '', 'type' => 'radio', 'name' => 'multiple', 'choices' => array( 1 => __("Yes",'acf'), 0 => __("No",'acf'), ), 'layout' => 'horizontal', )); } function format_value( $value, $post_id, $field ) { if( $value === 'null' ) { return false; } if( empty($value) ) { return $value; } $value = $this->get_posts( $value, $field ); foreach( array_keys($value) as $i ) { $post = acf_extract_var( $value, $i ); if( is_object($post) ) { $post = get_permalink( $post ); } $value[ $i ] = $post; } if( !$field['multiple'] ) { $value = array_shift($value); } return $value; } function update_value( $value, $post_id, $field ) { if( empty($value) ) { return $value; } if( is_array($value) ) { foreach( $value as $k => $v ){ if( is_object($v) && isset($v->ID) ) { $value[ $k ] = $v->ID; } } $value = array_map('strval', $value); } elseif( is_object($value) && isset($value->ID) ) { $value = $value->ID; } return $value; } } new acf_field_page_link(); endif; ?>
