<?php
 if( ! class_exists('acf_field_url') ) : class acf_field_url extends acf_field { function __construct() { $this->name = 'url'; $this->label = __("Url",'acf'); $this->defaults = array( 'default_value' => '', 'placeholder' => '', ); parent::__construct(); } function render_field( $field ) { $o = array( 'type', 'id', 'class', 'name', 'value', 'placeholder' ); $e = ''; $atts = array(); foreach( $o as $k ) { $atts[ $k ] = $field[ $k ]; } foreach( array( 'readonly', 'disabled' ) as $k ) { if( !empty($field[ $k ]) ) { $atts[ $k ] = $k; } } $e .= '<div class="acf-input-wrap acf-url">'; $e .= '<i class="acf-icon acf-icon-globe small"></i><input ' . acf_esc_attr( $atts ) . ' />'; $e .= '</div>'; echo $e; } function render_field_settings( $field ) { acf_render_field_setting( $field, array( 'label' => __('Default Value','acf'), 'instructions' => __('Appears when creating a new post','acf'), 'type' => 'text', 'name' => 'default_value', )); acf_render_field_setting( $field, array( 'label' => __('Placeholder Text','acf'), 'instructions' => __('Appears within the input','acf'), 'type' => 'text', 'name' => 'placeholder', )); } function validate_value( $valid, $value, $field, $input ){ if( empty($value) ) { return $valid; } if( substr($value, 0, 4) !== 'http' ) { $valid = __('Value must be a valid URL', 'acf'); } return $valid; } } new acf_field_url(); endif; ?>
