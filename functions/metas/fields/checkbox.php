<?php
 if( ! class_exists('acf_field_checkbox') ) : class acf_field_checkbox extends acf_field { function __construct() { $this->name = 'checkbox'; $this->label = __("Checkbox",'acf'); $this->category = 'choice'; $this->defaults = array( 'layout' => 'vertical', 'choices' => array(), 'default_value' => '', 'toggle' => 0 ); parent::__construct(); } function render_field( $field ) { $field['value'] = acf_get_array($field['value'], false); acf_hidden_input(array( 'type' => 'hidden', 'name' => $field['name'], )); $i = 0; $li = ''; $all_checked = true; $field['name'] .= '[]'; if( !empty($field['choices']) ) { foreach( $field['choices'] as $value => $label ) { $i++; $atts = array( 'type' => 'checkbox', 'id' => $field['id'], 'name' => $field['name'], 'value' => $value, ); if( in_array($value, $field['value']) ) { $atts['checked'] = 'checked'; } else { $all_checked = false; } if( isset($field['disabled']) && acf_in_array($value, $field['disabled']) ) { $atts['disabled'] = 'disabled'; } if( $i > 1 ) { $atts['id'] .= '-' . $value; } $li .= '<li><label><input ' . acf_esc_attr( $atts ) . '/>' . $label . '</label></li>'; } if( $field['toggle'] ) { $label = __("Toggle All", 'acf'); $atts = array( 'type' => 'checkbox', 'class' => 'acf-checkbox-toggle' ); if( is_string($field['toggle']) ) { $label = $field['toggle']; } if( $all_checked ) { $atts['checked'] = 'checked'; } $li = '<li><label><input ' . acf_esc_attr( $atts ) . '/>' . $label . '</label></li>' . $li; } } $field['class'] .= ' acf-checkbox-list'; $field['class'] .= ($field['layout'] == 'horizontal') ? ' acf-hl' : ' acf-bl'; echo '<ul ' . acf_esc_attr(array( 'class' => $field['class'] )) . '>' . $li . '</ul>'; } function render_field_settings( $field ) { $field['choices'] = acf_encode_choices($field['choices']); $field['default_value'] = acf_encode_choices($field['default_value']); acf_render_field_setting( $field, array( 'label' => __('Choices','acf'), 'instructions' => __('Enter each choice on a new line.','acf') . '<br /><br />' . __('For more control, you may specify both a value and label like this:','acf'). '<br /><br />' . __('red : Red','acf'), 'type' => 'textarea', 'name' => 'choices', )); acf_render_field_setting( $field, array( 'label' => __('Default Value','acf'), 'instructions' => __('Enter each default value on a new line','acf'), 'type' => 'textarea', 'name' => 'default_value', )); acf_render_field_setting( $field, array( 'label' => __('Layout','acf'), 'instructions' => '', 'type' => 'radio', 'name' => 'layout', 'layout' => 'horizontal', 'choices' => array( 'vertical' => __("Vertical",'acf'), 'horizontal' => __("Horizontal",'acf') ) )); acf_render_field_setting( $field, array( 'label' => __('Toggle','acf'), 'instructions' => __('Prepend an extra checkbox to toggle all choices','acf'), 'type' => 'radio', 'name' => 'toggle', 'layout' => 'horizontal', 'choices' => array( 1 => __("Yes",'acf'), 0 => __("No",'acf'), ) )); } function update_field( $field ) { $field['choices'] = acf_decode_choices($field['choices']); $field['default_value'] = acf_decode_choices($field['default_value']); return $field; } function update_value( $value, $post_id, $field ) { if( empty($value) ) { return $value; } if( is_array($value) ) { $value = array_map('strval', $value); } return $value; } } new acf_field_checkbox(); endif; ?>
