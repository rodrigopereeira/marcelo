<?php
 if( ! class_exists('acf_field_color_picker') ) : class acf_field_color_picker extends acf_field { function __construct() { $this->name = 'color_picker'; $this->label = __("Color Picker",'acf'); $this->category = 'jquery'; $this->defaults = array( 'default_value' => '', ); parent::__construct(); } function input_admin_enqueue_scripts() { global $wp_scripts; if( isset($wp_scripts->registered['iris']) ) { return; } wp_enqueue_style( 'wp-color-picker' ); wp_enqueue_script( 'iris', admin_url( 'js/iris.min.js' ), array( 'jquery-ui-draggable', 'jquery-ui-slider', 'jquery-touch-punch' ), false, 1 ); wp_enqueue_script( 'wp-color-picker', admin_url( 'js/color-picker.min.js' ), array( 'iris' ), false, 1 ); $colorpicker_l10n = array( 'clear' => __('Clear', 'acf' ), 'defaultString' => __('Default', 'acf' ), 'pick' => __('Select Color', 'acf' ) ); wp_localize_script( 'wp-color-picker', 'wpColorPickerL10n', $colorpicker_l10n ); } function render_field( $field ) { $atts = array(); $e = ''; foreach( array( 'id', 'class', 'name', 'value' ) as $k ) { $atts[ $k ] = $field[ $k ]; } $e .= '<div class="acf-color_picker">'; $e .= '<input type="text" ' . acf_esc_attr($atts) . ' />'; $e .= '</div>'; echo $e; } function render_field_settings( $field ) { acf_render_field_setting( $field, array( 'label' => __('Default Value','acf'), 'instructions' => '', 'type' => 'text', 'name' => 'default_value', 'placeholder' => '#FFFFFF' )); } } new acf_field_color_picker(); endif; ?>
