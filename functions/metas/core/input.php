<?php  class acf_input { function __construct() { add_action('acf/save_post', array($this, 'save_post'), 10, 1); add_action('acf/input/admin_enqueue_scripts', array($this, 'admin_enqueue_scripts'), 0, 0); add_action('acf/input/admin_footer', array($this, 'admin_footer'), 0, 0); add_action( 'wp_ajax_acf/validate_save_post', array($this, 'ajax_validate_save_post') ); add_action( 'wp_ajax_nopriv_acf/validate_save_post', array($this, 'ajax_validate_save_post') ); } function save_post( $post_id = 0 ) { foreach( $_POST['acf'] as $k => $v ) { $field = acf_get_field( $k ); if( $field ) { acf_update_value( $v, $post_id, $field ); } } } function admin_enqueue_scripts() { wp_enqueue_script('acf-input'); wp_enqueue_style('acf-input'); } function admin_footer() { $args = acf_get_setting('form_data'); global $wp_version; $o = array( 'post_id' => $args['post_id'], 'nonce' => wp_create_nonce( 'acf_nonce' ), 'admin_url' => admin_url(), 'ajaxurl' => admin_url( 'admin-ajax.php' ), 'ajax' => $args['ajax'], 'validation' => $args['validation'], 'wp_version' => $wp_version ); $l10n = apply_filters( 'acf/input/admin_l10n', array( 'unload' => __('The changes you made will be lost if you navigate away from this page','acf'), 'expand_details' => __('Expand Details','acf'), 'collapse_details' => __('Collapse Details','acf'), 'validation_successful' => __('Validation successful', 'acf'), 'validation_failed' => __('Validation failed', 'acf'), 'validation_failed_1' => __('1 field requires attention', 'acf'), 'validation_failed_2' => __('%d fields require attention', 'acf'), 'restricted' => __('Restricted','acf') )); ?>
<script type="text/javascript">
/* <![CDATA[ */
if( typeof acf !== 'undefined' ) {

	acf.o = <?php echo json_encode($o); ?>;
	acf.l10n = <?php echo json_encode($l10n); ?>;
	<?php do_action('acf/input/admin_footer_js'); ?>
	
	acf.do_action('prepare');
	
}
/* ]]> */
</script>
<?php
 } function ajax_validate_save_post() { if( !isset($_POST['_acfnonce']) ) { wp_send_json_error(); } $json = array( 'valid' => 1, 'errors' => 0 ); if( acf_validate_save_post() ) { wp_send_json_success($json); } $json['valid'] = 0; $json['errors'] = acf_get_validation_errors(); wp_send_json_success($json); } } new acf_input(); class acf_input_listener { function __construct() { do_action('acf/input/admin_enqueue_scripts'); $admin_head = 'admin_head'; $admin_footer = 'admin_footer'; global $pagenow; if( $pagenow == 'customize.php' ) { $admin_head = 'customize_controls_print_scripts'; $admin_footer = 'customize_controls_print_footer_scripts'; } elseif( $pagenow == 'wp-login.php' ) { $admin_head = 'login_head'; $admin_footer = 'login_footer'; } elseif( !is_admin() ) { $admin_head = 'wp_head'; $admin_footer = 'wp_footer'; } add_action($admin_head, array( $this, 'admin_head'), 20 ); add_action($admin_footer, array( $this, 'admin_footer'), 20 ); } function admin_head() { do_action('acf/input/admin_head'); } function admin_footer() { do_action('acf/input/admin_footer'); } } function acf_enqueue_scripts() { if( acf_get_setting('enqueue_scripts') ) { return; } acf_update_setting('enqueue_scripts', 1); new acf_input_listener(); } function acf_enqueue_uploader() { if ( defined( 'DOING_AJAX' ) && DOING_AJAX ) { return; } if( acf_get_setting('enqueue_uploader') ) { return; } acf_update_setting('enqueue_uploader', 1); if( current_user_can( 'upload_files' ) ) { wp_enqueue_media(); } ?><div class="acf-hidden"><?php wp_editor( '', 'acf_content' ); ?></div><?php
 } function acf_form_data( $args = array() ) { acf_enqueue_scripts(); $args = acf_parse_args($args, array( 'post_id' => 0, 'nonce' => 'post', 'validation' => 1, 'ajax' => 0, )); acf_update_setting('form_data', $args); if( $args['ajax'] ) { add_action('admin_footer', 'acf_enqueue_uploader', 1); } ?>
	<div id="acf-form-data" class="acf-hidden">
		<input type="hidden" name="_acfnonce" value="<?php echo wp_create_nonce( $args['nonce'] ); ?>" />
		<input type="hidden" name="_acfchanged" value="0" />
		<?php do_action('acf/input/form_data', $args); ?>
	</div>
	<?php
} function acf_save_post( $post_id = 0 ) { if( empty($_POST['acf']) ) { return false; } do_action('acf/save_post', $post_id); return true; } function acf_validate_save_post( $show_errors = false ) { if( !empty($_POST['acf']) ) { $keys = array_keys($_POST['acf']); foreach( $keys as $key ) { $field = acf_get_field( $key ); acf_validate_value( $_POST['acf'][ $key ], $field, "acf[{$key}]" ); } } do_action('acf/validate_save_post'); if( $errors = acf_get_validation_errors() ) { if( $show_errors ) { $message = '<h2>Validation failed</h2><ul>'; foreach( $errors as $error ) { $message .= '<li>' . $error['message'] . '</li>'; } $message .= '</ul>'; wp_die( $message, 'Validation failed' ); } return false; } return true; } function acf_validate_value( $value, $field, $input ) { $valid = true; $message = sprintf( __( '%s value is required', 'acf' ), $field['label'] ); if( $field['required'] ) { if( empty($value) && !is_numeric($value) ) { $valid = false; } } $valid = apply_filters( "acf/validate_value", $valid, $value, $field, $input ); $valid = apply_filters( "acf/validate_value/type={$field['type']}", $valid, $value, $field, $input ); $valid = apply_filters( "acf/validate_value/name={$field['name']}", $valid, $value, $field, $input ); $valid = apply_filters( "acf/validate_value/key={$field['key']}", $valid, $value, $field, $input ); if( !empty($valid) && is_string($valid) ) { $message = $valid; $valid = false; } if( !$valid ) { acf_add_validation_error( $input, $message ); return false; } return true; } function acf_add_validation_error( $input, $message = '' ) { if( empty($GLOBALS['acf_validation_errors']) ) { $GLOBALS['acf_validation_errors'] = array(); } $GLOBALS['acf_validation_errors'][] = array( 'input' => $input, 'message' => $message ); } function acf_get_validation_errors() { if( empty($GLOBALS['acf_validation_errors']) ) { return false; } return $GLOBALS['acf_validation_errors']; } ?>
