<?php
 if( ! class_exists('acf_admin_field_group') ) : class acf_admin_field_group { function __construct() { add_action('current_screen', array($this, 'current_screen')); add_action('save_post', array($this, 'save_post'), 10, 2); add_action('wp_ajax_acf/field_group/render_field_settings', array($this, 'ajax_render_field_settings')); add_action('wp_ajax_acf/field_group/render_location_value', array($this, 'ajax_render_location_value')); add_action('wp_ajax_acf/field_group/move_field', array($this, 'ajax_move_field')); add_filter('post_updated_messages', array($this, 'post_updated_messages')); } function post_updated_messages( $messages ) { $messages['acf-field-group'] = array( 0 => '', 1 => __('Field group updated.', 'acf'), 2 => __('Field group updated.', 'acf'), 3 => __('Field group deleted.', 'acf'), 4 => __('Field group updated.', 'acf'), 5 => false, 6 => __('Field group published.', 'acf'), 7 => __('Field group saved.', 'acf'), 8 => __('Field group submitted.', 'acf'), 9 => __('Field group scheduled for.', 'acf'), 10 => __('Field group draft updated.', 'acf') ); return $messages; } function current_screen() { if( !acf_is_screen('acf-field-group') ) { return; } acf_disable_local(); add_action('admin_enqueue_scripts', array($this,'admin_enqueue_scripts')); add_action('admin_head', array($this,'admin_head')); } function admin_enqueue_scripts() { wp_dequeue_script('autosave'); wp_enqueue_style('acf-field-group'); wp_enqueue_script('acf-field-group'); do_action('acf/field_group/admin_enqueue_scripts'); } function admin_head() { global $post, $field_group; $field_group = acf_get_field_group( $post ); $l10n = apply_filters('acf/field_group/admin_l10n', array( 'move_to_trash' => __("Move to trash. Are you sure?",'acf'), 'checked' => __("checked",'acf'), 'no_fields' => __("No toggle fields available",'acf'), 'title_is_required' => __("Field group title is required",'acf'), 'copy' => __("copy",'acf'), 'or' => __("or",'acf'), 'fields' => __("Fields",'acf'), 'parent_fields' => __("Parent fields",'acf'), 'sibling_fields' => __("Sibling fields",'acf'), 'move_field' => __("Move Custom Field",'acf'), 'move_field_warning' => __("This field cannot be moved until its changes have been saved",'acf'), 'null' => __("Null",'acf'), 'unload' => __('The changes you made will be lost if you navigate away from this page','acf'), 'field_name_start' => __('The string "field_" may not be used at the start of a field name','acf'), )); $o = array( 'post_id' => $post->ID, 'nonce' => wp_create_nonce( 'acf_nonce' ), 'admin_url' => admin_url(), 'ajaxurl' => admin_url( 'admin-ajax.php' ), 'validation' => 0, ); ?>
		<script type="text/javascript">
		(function($) {
			
			acf.o = <?php echo json_encode( $o ); ?>;
			acf.l10n = <?php echo json_encode( $l10n ); ?>;
			
		})(jQuery);	
		</script>
		<?php
 add_meta_box('acf-field-group-fields', __("Fields",'acf'), array($this, 'mb_fields'), 'acf-field-group', 'normal', 'high'); add_meta_box('acf-field-group-locations', __("Location",'acf'), array($this, 'mb_locations'), 'acf-field-group', 'normal', 'high'); add_meta_box('acf-field-group-options', __("Settings",'acf'), array($this, 'mb_options'), 'acf-field-group', 'normal', 'high'); add_action('post_submitbox_misc_actions', array($this, 'post_submitbox_misc_actions'), 10, 0); add_action('edit_form_after_title', array($this, 'edit_form_after_title'), 10, 0); add_filter('screen_settings', array($this, 'screen_settings'), 10, 1); do_action('acf/field_group/admin_head'); } function screen_settings( $html ) { $checked = acf_get_user_setting('show_field_keys') ? 'checked="checked"' : ''; $html .= '<div id="acf-append-show-on-screen" class="acf-hidden">'; $html .= '<label for="acf-field-key-hide"><input id="acf-field-key-hide" type="checkbox" value="1" name="show_field_keys" ' . $checked . ' /> ' . __('Field Keys','acf') . '</label>'; $html .= '</div>'; return $html; } function post_submitbox_misc_actions() { global $field_group; $status = $field_group['active'] ? __("Active",'acf') : __("Disabled",'acf'); ?>
<script type="text/javascript">
(function($) {
	
	// modify status
	$('#post-status-display').html('<?php echo $status; ?>');
	
	
	// remove edit links
	$('#misc-publishing-actions a').remove();
	
	
	// remove editables (fixes status text changing on submit)
	$('#misc-publishing-actions .hide-if-js').remove();
	
})(jQuery);	
</script>
<?php	 } function edit_form_after_title() { ?>
		<div id="acf-form-data" class="acf-hidden">
			<input type="hidden" name="_acfnonce" value="<?php echo wp_create_nonce( 'field_group' ); ?>" />
			<input type="hidden" name="_acf_delete_fields" value="0" id="input-delete-fields" />
			<?php do_action('acf/field_group/form_data'); ?>
		</div>
		<?php
 } function save_post( $post_id, $post ) { if( defined('DOING_AUTOSAVE') && DOING_AUTOSAVE ) { return $post_id; } if( $post->post_type !== 'acf-field-group' ) { return $post_id; } if( wp_is_post_revision($post_id) ) { return $post_id; } if( !acf_verify_nonce('field_group') ) { return $post_id; } acf_disable_local(); unset( $_POST['acf_fields']['acfcloneindex'] ); if( !empty($_POST['acf_fields']) ) { foreach( $_POST['acf_fields'] as $field ) { $specific = false; $save = acf_extract_var( $field, 'save' ); if( $save == 'meta' ) { $specific = array( 'menu_order', 'post_parent', ); } if( empty($field['parent']) ) { $field['parent'] = $post_id; } acf_update_field( $field, $specific ); } } if( $_POST['_acf_delete_fields'] ) { $ids = explode('|', $_POST['_acf_delete_fields']); $ids = array_map( 'intval', $ids ); foreach( $ids as $id ) { if( $id != 0 ) { acf_delete_field( $id ); } } } $_POST['acf_field_group']['ID'] = $post_id; $_POST['acf_field_group']['title'] = $_POST['post_title']; acf_update_field_group( $_POST['acf_field_group'] ); return $post_id; } function mb_fields() { global $field_group; $view = array( 'fields' => acf_get_fields_by_id( $field_group['ID'] ) ); acf_get_view('field-group-fields', $view); } function mb_options() { global $field_group; if( !acf_is_field_group_key( $field_group['key']) ) { $field_group['key'] = uniqid('group_'); } include( acf_get_path('admin/views/field-group-options.php') ); } function mb_locations() { global $field_group; if( empty($field_group['location']) ) { $field_group['location'] = array( array( array( 'param' => 'post_type', 'operator' => '==', 'value' => 'post', ) ) ); } include( acf_get_path('admin/views/field-group-locations.php') ); } function render_location_value( $options ) { $options = wp_parse_args( $options, array( 'group_id' => 0, 'rule_id' => 0, 'value' => null, 'param' => null, )); $choices = array(); if( $options['param'] == "page_parent" ) { $options['param'] = "page"; } switch( $options['param'] ) { case "post_type" : $exclude = array('attachment'); $choices = acf_get_post_types( $exclude ); $choices = acf_get_pretty_post_types( $choices ); break; case "post" : $exclude = array('page', 'attachment'); $post_types = acf_get_post_types( $exclude ); $groups = acf_get_grouped_posts(array( 'post_type' => $post_types )); if( !empty($groups) ) { foreach( array_keys($groups) as $group_title ) { $posts = acf_extract_var( $groups, $group_title ); foreach( array_keys($posts) as $post_id ) { $posts[ $post_id ] = acf_get_post_title( $posts[ $post_id ] ); }; $choices[ $group_title ] = $posts; } } break; case "post_category" : $terms = acf_get_taxonomy_terms( 'category' ); if( !empty($terms) ) { $choices = array_pop($terms); } break; case "post_format" : $choices = get_post_format_strings(); break; case "post_status" : global $wp_post_statuses; if( !empty($wp_post_statuses) ) { foreach( $wp_post_statuses as $status ) { $choices[ $status->name ] = $status->label; } } break; case "post_taxonomy" : $choices = acf_get_taxonomy_terms(); if( isset($choices['post_format']) ) { unset( $choices['post_format']) ; } break; case "page" : $groups = acf_get_grouped_posts(array( 'post_type' => 'page' )); if( !empty($groups) ) { foreach( array_keys($groups) as $group_title ) { $posts = acf_extract_var( $groups, $group_title ); foreach( array_keys($posts) as $post_id ) { $posts[ $post_id ] = acf_get_post_title( $posts[ $post_id ] ); }; $choices = $posts; } } break; case "page_type" : $choices = array( 'front_page' => __("Front Page",'acf'), 'posts_page' => __("Posts Page",'acf'), 'top_level' => __("Top Level Page (no parent)",'acf'), 'parent' => __("Parent Page (has children)",'acf'), 'child' => __("Child Page (has parent)",'acf'), ); break; case "page_parent" : break; case "page_template" : $choices = array( 'default' => __("Default Template",'acf'), ); $templates = get_page_templates(); foreach( $templates as $k => $v ) { $choices[ $v ] = $k; } break; case "current_user" : $choices = array( 'logged_in' => __('Logged in', 'acf'), 'viewing_front' => __('Viewing front end', 'acf'), 'viewing_back' => __('Viewing back end', 'acf') ); break; case "current_user_role" : global $wp_roles; $choices = $wp_roles->get_names(); if( is_multisite() ) { $choices = array_merge(array( 'super_admin' => __('Super Admin', 'acf') ), $choices); } break; case "user_role" : global $wp_roles; $choices = array_merge( array('all' => __('All', 'acf')), $wp_roles->get_names() ); break; case "user_form" : $choices = array( 'all' => __('All', 'acf'), 'edit' => __('Add / Edit', 'acf'), 'register' => __('Register', 'acf') ); break; case "attachment" : $choices = array('all' => __('All', 'acf')); break; case "taxonomy" : $choices = array_merge( array('all' => __('All', 'acf')), acf_get_taxonomies() ); if( isset($choices['post_format']) ) { unset( $choices['post_format']); } break; case "comment" : $choices = array('all' => __('All', 'acf')); break; case "widget" : global $wp_widget_factory; $choices = array( 'all' => __('All', 'acf'), ); if( !empty( $wp_widget_factory->widgets ) ) { foreach( $wp_widget_factory->widgets as $widget ) { $choices[ $widget->id_base ] = $widget->name; } } break; } $choices = apply_filters( 'acf/location/rule_values/' . $options['param'], $choices ); acf_render_field(array( 'type' => 'select', 'prefix' => "acf_field_group[location][{$options['group_id']}][{$options['rule_id']}]", 'name' => 'value', 'value' => $options['value'], 'choices' => $choices, )); } function ajax_render_location_value() { if( !acf_verify_ajax() ) { die(); } $this->render_location_value( $_POST ); die(); } function ajax_render_field_settings() { $options = array( 'nonce' => '', 'parent' => 0, 'field_group' => 0, 'prefix' => '', 'type' => '', ); $options = wp_parse_args($_POST, $options); if( !wp_verify_nonce($options['nonce'], 'acf_nonce') ) { die(0); } if( !$options['type'] ) { die(0); } $field = acf_get_valid_field(array( 'type' => $options['type'], 'name' => 'temp', 'prefix' => $options['prefix'], 'parent' => $options['parent'], 'field_group' => $options['field_group'], )); do_action("acf/render_field_settings/type={$field['type']}", $field); die(); } function ajax_move_field() { acf_disable_local(); $args = acf_parse_args($_POST, array( 'nonce' => '', 'field_id' => 0, 'field_group_id' => 0 )); if( ! wp_verify_nonce($args['nonce'], 'acf_nonce') ) { die(); } if( $args['field_id'] && $args['field_group_id'] ) { $field = acf_get_field($args['field_id']); $field_group = acf_get_field_group($args['field_group_id']); $field['parent'] = $field_group['ID']; $field['conditional_logic'] = 0; acf_update_field($field); $v1 = $field['label']; $v2 = '<a href="' . admin_url("post.php?post={$field_group['ID']}&action=edit") . '" target="_blank">' . $field_group['title'] . '</a>'; echo '<p><strong>' . __('Move Complete.', 'acf') . '</strong></p>'; echo '<p>' . sprintf( __('The %s field can now be found in the %s field group', 'acf'), $v1, $v2 ). '</p>'; echo '<a href="#" class="acf-button blue acf-close-popup">' . __("Close Window",'acf') . '</a>'; die(); } $field_groups = acf_get_field_groups(); $choices = array(); if( !empty($field_groups) ) { foreach( $field_groups as $field_group ) { if( $field_group['ID'] ) { $choices[ $field_group['ID'] ] = $field_group['title']; } } } $field = acf_get_valid_field(array( 'type' => 'select', 'name' => 'acf_field_group', 'choices' => $choices )); echo '<p>' . __('Please select the destination for this field', 'acf') . '</p>'; echo '<form id="acf-move-field-form">'; acf_render_field_wrap( $field ); echo '<button type="submit" class="acf-button blue">' . __("Move Field",'acf') . '</button>'; echo '</form>'; die(); } } new acf_admin_field_group(); endif; ?>
