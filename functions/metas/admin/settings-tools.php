<?php  class acf_settings_tools { var $view = 'settings-tools', $data = array(); function __construct() { add_action('admin_menu', array($this, 'admin_menu')); } function admin_menu() { if( !acf_get_setting('show_admin') ) { return; } $page = add_submenu_page('edit.php?post_type=acf-field-group', __('Tools','acf'), __('Tools','acf'), acf_get_setting('capability'),'acf-settings-tools', array($this,'html') ); add_action('load-' . $page, array($this,'load')); } function load() { acf_disable_local(); if( acf_verify_nonce('import') ) { $this->import(); } elseif( acf_verify_nonce('export') ) { if( isset($_POST['generate']) ) { $this->generate(); } else { $this->export(); } } acf_enqueue_scripts(); } function html() { acf_get_view($this->view, $this->data); } function export() { $json = $this->get_json(); if( $json === false ) { acf_add_admin_notice( __("No field groups selected", 'acf') , 'error'); return; } $file_name = 'acf-export-' . date('Y-m-d') . '.json'; header( "Content-Description: File Transfer" ); header( "Content-Disposition: attachment; filename={$file_name}" ); header( "Content-Type: application/json; charset=utf-8" ); echo acf_json_encode( $json ); die; } function import() { if( empty($_FILES['acf_import_file']) ) { acf_add_admin_notice( __("No file selected", 'acf') , 'error'); return; } $file = $_FILES['acf_import_file']; if( $file['error'] ) { acf_add_admin_notice(__('Error uploading file. Please try again', 'acf'), 'error'); return; } if( pathinfo($file['name'], PATHINFO_EXTENSION) !== 'json' ) { acf_add_admin_notice(__('Incorrect file type', 'acf'), 'error'); return; } $json = file_get_contents( $file['tmp_name'] ); $json = json_decode($json, true); if( empty($json) ) { acf_add_admin_notice(__('Import file empty', 'acf'), 'error'); return; } if( isset($json['key']) ) { $json = array( $json ); } $added = array(); $ignored = array(); $ref = array(); $order = array(); foreach( $json as $field_group ) { if( acf_get_field_group($field_group['key'], true) ) { $ignored[] = $field_group['title']; continue; } $fields = acf_extract_var($field_group, 'fields'); $fields = acf_prepare_fields_for_import( $fields ); $field_group = acf_update_field_group( $field_group ); $ref[ $field_group['key'] ] = $field_group['ID']; $order[ $field_group['ID'] ] = 0; foreach( $fields as $field ) { if( empty($field['parent']) ) { $field['parent'] = $field_group['ID']; } elseif( isset($ref[ $field['parent'] ]) ) { $field['parent'] = $ref[ $field['parent'] ]; } if( !isset($order[ $field['parent'] ]) ) { $order[ $field['parent'] ] = 0; } $field['menu_order'] = $order[ $field['parent'] ]; $order[ $field['parent'] ]++; $field = acf_update_field( $field ); $ref[ $field['key'] ] = $field['ID']; } $added[] = '<a href="' . admin_url("post.php?post={$field_group['ID']}&action=edit") . '" target="_blank">' . $field_group['title'] . '</a>'; } if( !empty($added) ) { $message = __('<b>Success</b>. Import tool added %s field groups: %s', 'acf'); $message = sprintf( $message, count($added), implode(', ', $added) ); acf_add_admin_notice( $message ); } if( !empty($ignored) ) { $message = __('<b>Warning</b>. Import tool detected %s field groups already exist and have been ignored: %s', 'acf'); $message = sprintf( $message, count($ignored), implode(', ', $ignored) ); acf_add_admin_notice( $message, 'error' ); } } function generate() { $json = $this->get_json(); if( $json === false ) { acf_add_admin_notice( __("No field groups selected", 'acf') , 'error'); return; } $this->view = 'settings-tools-export'; $this->data['field_groups'] = $json; } function get_json() { if( empty($_POST['acf_export_keys']) ) { return false; } $json = array(); foreach( $_POST['acf_export_keys'] as $key ) { $field_group = acf_get_field_group( $key ); if( empty($field_group) ) { continue; } $field_group['fields'] = acf_get_fields( $field_group ); $field_group['fields'] = acf_prepare_fields_for_export( $field_group['fields'] ); $id = acf_extract_var( $field_group, 'ID' ); $json[] = $field_group; } return $json; } } new acf_settings_tools(); ?>
