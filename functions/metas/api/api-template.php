<?php  function acf_get_field_reference( $field_name, $post_id ) { $reference = false; $found = false; $cache = wp_cache_get( "field_reference/post_id={$post_id}/name={$field_name}", 'acf', false, $found ); if( $found ) { return $cache; } if( is_numeric($post_id) ) { $v = get_post_meta( $post_id, "_{$field_name}", false ); if( isset($v[0]) ) { $reference = $v[0]; } } elseif( strpos($post_id, 'user_') !== false ) { $user_id = str_replace('user_', '', $post_id); $user_id = intval( $user_id ); $v = get_user_meta( $user_id, "_{$field_name}", false ); if( isset($v[0]) ) { $reference = $v[0]; } } elseif( strpos($post_id, 'comment_') !== false ) { $comment_id = str_replace('comment_', '', $post_id); $comment_id = intval( $comment_id ); $v = get_comment_meta( $comment_id, "_{$field_name}", false ); if( isset($v[0]) ) { $reference = $v[0]; } } else { $v = get_option( "_{$post_id}_{$field_name}", false ); if( ! is_null($v) ) { $reference = $v; } } wp_cache_set( "field_reference/post_id={$post_id}/name={$field_name}", $reference, 'acf' ); return $reference; } function the_field( $selector, $post_id = false, $format_value = true ) { $value = get_field($selector, $post_id, $format_value); if( is_array($value) ) { $value = @implode( ', ', $value ); } echo $value; } function get_field( $selector, $post_id = false, $format_value = true ) { $post_id = acf_get_valid_post_id( $post_id ); $field = acf_maybe_get_field( $selector, $post_id ); if( !$field ) { $field = acf_get_valid_field(array( 'name' => $selector, 'key' => '', 'type' => '', )); $format_value = false; } $value = acf_get_value( $post_id, $field ); if( $format_value ) { $value = acf_format_value( $value, $post_id, $field ); } return $value; } function get_field_object( $selector, $post_id = false, $format_value = true, $load_value = true ) { if( is_array($format_value) ) { extract( $format_value ); } $post_id = acf_get_valid_post_id( $post_id ); $field = acf_maybe_get_field( $selector, $post_id ); if( !$field ) { return false; } if( $load_value ) { $field['value'] = acf_get_value( $post_id, $field ); } if( $format_value ) { $field['value'] = acf_format_value( $field['value'], $post_id, $field ); } return $field; } function get_fields( $post_id = false, $format_value = true ) { $fields = get_field_objects( $post_id, $format_value ); $return = array(); if( is_array($fields) ) { foreach( $fields as $k => $field ) { $return[ $k ] = $field['value']; } } return $return; } function get_field_objects( $post_id = false, $format_value = true, $load_value = true ) { global $wpdb; $post_id = acf_get_valid_post_id( $post_id ); $meta = array(); $fields = array(); if( is_numeric($post_id) ) { $meta = get_post_meta( $post_id ); } elseif( strpos($post_id, 'user_') !== false ) { $user_id = (int) str_replace('user_', '', $post_id); $meta = get_user_meta( $user_id ); } elseif( strpos($post_id, 'comment_') !== false ) { $comment_id = (int) str_replace('comment_', '', $post_id); $meta = get_comment_meta( $comment_id ); } else { $rows = $wpdb->get_results($wpdb->prepare( "SELECT option_name, option_value FROM $wpdb->options WHERE option_name LIKE %s OR option_name LIKE %s", $post_id . '_%' , '_' . $post_id . '_%' ), ARRAY_A); if( !empty($rows) ) { foreach( $rows as $row ) { $meta[ $row['option_name'] ][] = $row['option_value']; } } } if( empty($meta) ) { return false; } foreach( $meta as $k => $v ) { if( $k[0] === '_' ) { continue; } if( !array_key_exists("_{$k}", $meta) ) { continue; } $field_key = $meta["_{$k}"][0]; $field = acf_get_field( $field_key ); if( !$field || acf_is_sub_field($field) ) { continue; } if( $load_value ) { $field['value'] = acf_get_value( $post_id, $field ); } if( $format_value ) { $field['value'] = acf_format_value( $field['value'], $post_id, $field ); } $fields[ $field['name'] ] = $field; } if( empty($fields) ) { return false; } return $fields; } function have_rows( $selector, $post_id = false ) { $row = array(); $new_parent_loop = false; $new_child_loop = false; $sub_field = false; $sub_exists = false; $_post_id = $post_id; $post_id = acf_get_valid_post_id( $post_id ); if( empty($GLOBALS['acf_field']) ) { reset_rows( true ); $new_parent_loop = true; } else { $row = end( $GLOBALS['acf_field'] ); $prev = prev( $GLOBALS['acf_field'] ); $change = false; if( $post_id != $row['post_id'] ) { $change = 'post_id'; } elseif( $selector != $row['selector'] ) { $change = 'selector'; } if( $change ) { $sub_field = acf_get_sub_field($selector, $row['field']); if( $sub_field ) { $sub_exists = isset($row['value'][ $row['i'] ][ $sub_field['key'] ]); } } if( $change == 'post_id' ) { if( $prev && $prev['post_id'] == $post_id ) { reset_rows(); } elseif( empty($_post_id) && $sub_exists ) { $new_child_loop = true; } else { $new_parent_loop = true; } } elseif( $change == 'selector' ) { if( $prev && $prev['selector'] == $selector && $prev['post_id'] == $post_id ) { reset_rows(); } elseif( $sub_exists ) { $new_child_loop = true; } else { $new_parent_loop = true; } } } if( $new_parent_loop ) { $field = get_field_object( $selector, $post_id, false ); $value = acf_extract_var( $field, 'value' ); $GLOBALS['acf_field'][] = array( 'selector' => $selector, 'name' => $field['name'], 'value' => $value, 'field' => $field, 'i' => -1, 'post_id' => $post_id, ); } elseif( $new_child_loop ) { $value = $row['value'][ $row['i'] ][ $sub_field['key'] ]; $GLOBALS['acf_field'][] = array( 'selector' => $selector, 'name' => $row['name'] . '_' . $row['i'], 'value' => $value, 'field' => $sub_field, 'i' => -1, 'post_id' => $post_id, ); } $row = end( $GLOBALS['acf_field'] ); if( is_array($row['value']) && array_key_exists($row['i']+1, $row['value']) ) { return true; } reset_rows(); return false; } function the_row( $format = false ) { $depth = count($GLOBALS['acf_field']) - 1; $GLOBALS['acf_field'][ $depth ]['i']++; return get_row( $format ); } function get_row( $format = false ) { $row = acf_get_row(); if( !$row ) { return false; } $value = $row['value'][ $row['i'] ]; if( $format ) { $value = array( $value ); $value = acf_format_value( $value, $row['post_id'], $row['field'] ); $value = $value[0]; } return $value; } function acf_get_row() { if( !empty($GLOBALS['acf_field']) ) { return end( $GLOBALS['acf_field'] ); } return false; } function reset_rows( $hard_reset = false ) { if( $hard_reset ) { $GLOBALS['acf_field'] = array(); } else { $depth = count( $GLOBALS['acf_field'] ) - 1; unset( $GLOBALS['acf_field'][$depth] ); $GLOBALS['acf_field'] = array_values($GLOBALS['acf_field']); } return true; } function has_sub_field( $field_name, $post_id = false ) { $r = have_rows( $field_name, $post_id ); if( $r ) { the_row(); } return $r; } function has_sub_fields( $field_name, $post_id = false ) { return has_sub_field( $field_name, $post_id ); } function get_sub_field( $selector, $format_value = true ) { $row = acf_get_row(); if( !$row ) { return false; } $sub_field = acf_get_sub_field($selector, $row['field']); if( $sub_field ) { $selector = $sub_field['key']; } else { $format_value = false; } if( isset($row['value'][ $row['i'] ][ $selector ]) ) { $value = $row['value'][ $row['i'] ][ $selector ]; if( $format_value ) { $value = acf_format_value( $value, $row['post_id'], $sub_field ); } return $value; } return false; } function the_sub_field( $field_name, $format_value = true ) { $value = get_sub_field( $field_name, $format_value ); if( is_array($value) ) { $value = implode(', ',$value); } echo $value; } function get_sub_field_object( $selector, $format_value = true, $load_value = true ) { $row = acf_get_row(); if( !$row ) { return false; } $parent = $row['field']; $sub_field = acf_get_sub_field( $selector, $parent ); if( !$sub_field ) { return false; } if( $load_value ) { $sub_field['value'] = get_sub_field( $sub_field['name'], $format_value ); } return $sub_field; } function get_row_layout() { $row = get_row(); if( isset($row['acf_fc_layout']) ) { return $row['acf_fc_layout']; } return false; } function acf_shortcode( $atts ) { extract( shortcode_atts( array( 'field' => '', 'post_id' => false, 'format_value' => true ), $atts ) ); $value = get_field( $field, $post_id, $format_value ); if( is_array($value) ) { $value = @implode( ', ', $value ); } return $value; } add_shortcode( 'acf', 'acf_shortcode' ); function acf_form_head() { if( acf_verify_nonce('acf_form') ) { if( acf_validate_save_post(true) ) { $GLOBALS['acf_form'] = acf_extract_var($_POST, '_acf_form'); $GLOBALS['acf_form'] = @json_decode(base64_decode($GLOBALS['acf_form']), true); if( empty($GLOBALS['acf_form']) ) { return; } $post_id = acf_maybe_get( $GLOBALS['acf_form'], 'post_id', 0 ); $post_id = apply_filters('acf/pre_save_post', $post_id, $GLOBALS['acf_form']); acf_save_post( $post_id ); $return = acf_maybe_get( $GLOBALS['acf_form'], 'return', '' ); if( $return ) { $return = str_replace('%post_url%', get_permalink($post_id), $return); wp_redirect( $return ); exit; } } } acf_enqueue_scripts(); } add_action('acf/validate_save_post', '_validate_save_post'); function _validate_save_post() { if( isset($_POST['acf']['_post_title']) ) { $field = acf_get_valid_field(array( 'name' => '_post_title', 'label' => 'Title', 'type' => 'text', 'required' => true )); acf_validate_value( $_POST['acf']['_post_title'], $field, "acf[_post_title]" ); } } add_filter('acf/pre_save_post', '_acf_pre_save_post', 0, 2); function _acf_pre_save_post( $post_id, $form ) { $save = array( 'ID' => 0 ); if( is_numeric($post_id) ) { $save['ID'] = $post_id; } elseif( $post_id == 'new_post' ) { $form['new_post'] = acf_parse_args( $form['new_post'], array( 'post_type' => 'post', 'post_status' => 'draft', )); $save = array_merge($save, $form['new_post']); } else { return $post_id; } if( isset($_POST['acf']['_post_title']) ) { $save['post_title'] = acf_extract_var($_POST['acf'], '_post_title'); } if( isset($_POST['acf']['_post_content']) ) { $save['post_content'] = acf_extract_var($_POST['acf'], '_post_content'); } if( count($save) == 1 ) { return $post_id; } if( $save['ID'] ) { wp_update_post( $save ); } else { $post_id = wp_insert_post( $save ); } return $post_id; } function acf_form( $args = array() ) { $url = acf_get_current_url(); $args = wp_parse_args( $args, array( 'id' => 'acf-form', 'post_id' => false, 'new_post' => false, 'field_groups' => false, 'fields' => false, 'post_title' => false, 'post_content' => false, 'form' => true, 'form_attributes' => array(), 'return' => add_query_arg( 'updated', 'true', $url ), 'html_before_fields' => '', 'html_after_fields' => '', 'submit_value' => __("Update", 'acf'), 'updated_message' => __("Post updated", 'acf'), 'label_placement' => 'top', 'instruction_placement' => 'label', 'field_el' => 'div', 'uploader' => 'wp' )); $args['form_attributes'] = wp_parse_args( $args['form_attributes'], array( 'id' => 'post', 'class' => '', 'action' => '', 'method' => 'post', )); $args['post_id'] = acf_get_valid_post_id( $args['post_id'] ); $post_id = $args['post_id']; if( $post_id == 'new_post' ) { $post_id = false; $args['new_post'] = acf_parse_args( $args['new_post'], array( 'post_type' => 'post', 'post_status' => 'draft', )); } $args['form_attributes']['class'] .= ' acf-form'; $field_groups = array(); $fields = array(); if( $args['post_title'] ) { $fields[] = acf_get_valid_field(array( 'name' => '_post_title', 'label' => 'Title', 'type' => 'text', 'value' => $post_id ? get_post_field('post_title', $post_id) : '', 'required' => true )); } if( $args['post_content'] ) { $fields[] = acf_get_valid_field(array( 'name' => '_post_content', 'label' => 'Content', 'type' => 'wysiwyg', 'value' => $post_id ? get_post_field('post_content', $post_id) : '' )); } if( $args['fields'] ) { foreach( $args['fields'] as $selector ) { $fields[] = acf_maybe_get_field( $selector, $post_id, false ); } } elseif( $args['field_groups'] ) { foreach( $args['field_groups'] as $selector ) { $field_groups[] = acf_get_field_group( $selector ); } } elseif( $args['post_id'] == 'new_post' ) { $field_groups = acf_get_field_groups(array( 'post_type' => $args['new_post']['post_type'] )); } else { $field_groups = acf_get_field_groups(array( 'post_id' => $args['post_id'] )); } if( !empty($field_groups) ) { foreach( $field_groups as $field_group ) { $field_group_fields = acf_get_fields( $field_group ); if( !empty($field_group_fields) ) { foreach( array_keys($field_group_fields) as $i ) { $fields[] = acf_extract_var($field_group_fields, $i); } } } } if( !empty($_GET['updated']) && $args['updated_message'] ) { echo '<div id="message" class="updated"><p>' . $args['updated_message'] . '</p></div>'; } acf_update_setting('uploader', $args['uploader']); if( $args['form'] ): ?>
	
	<form <?php acf_esc_attr_e( $args['form_attributes']); ?>>
	
	<?php endif; acf_form_data(array( 'post_id' => $args['post_id'], 'nonce' => 'acf_form' )); ?>
	<div class="acf-hidden">
		<?php acf_hidden_input(array( 'name' => '_acf_form', 'value' => base64_encode(json_encode($args)) )); ?>
	</div>
	<div class="acf-fields acf-form-fields">
	
		<?php
 echo $args['html_before_fields']; if( $args['label_placement'] == 'left' ) { $args['field_el'] = 'tr'; ?><table class="acf-table"><tbody><?php
 } acf_render_fields( $post_id, $fields, $args['field_el'], $args['instruction_placement'] ); if( $args['label_placement'] == 'left' ) { ?></tbody></table><?php
 } echo $args['html_after_fields']; ?>
	
	</div><!-- acf-form-fields -->
	<?php if( $args['form'] ): ?>
	
	<!-- Submit -->
	<div class="acf-form-submit">
	
		<input type="submit" class="button button-primary button-large" value="<?php echo $args['submit_value']; ?>" />
		<span class="acf-spinner"></span>
		
	</div>
	<!-- / Submit -->
	
	</form>
	<?php endif; } function update_field( $selector, $value, $post_id = false ) { $post_id = acf_get_valid_post_id( $post_id ); $field = acf_maybe_get_field( $selector, $post_id ); if( !$field ) { $field = acf_get_valid_field(array( 'name' => $selector, 'key' => '', 'type' => '', )); } return acf_update_value( $value, $post_id, $field ); } function update_sub_field( $selector, $value, $post_id = false ) { $post_id = acf_get_valid_post_id( $post_id ); $field = false; if( is_string($selector) ) { $row = acf_get_row(); $post_id = $row['post_id']; $field = get_sub_field_object( $selector, false, false ); if( !$field ) { $field = acf_get_valid_field(array( 'name' => $selector, 'key' => '', 'type' => '', )); } $field['name'] = "{$row['name']}_{$row['i']}_{$field['name']}"; } elseif( is_array($selector) ) { if( count($selector) < 3 ) { return false; } $parent_name = acf_extract_var( $selector, 0 ); $field = acf_maybe_get_field( $parent_name, $post_id ); $name = "{$field['name']}"; foreach( $selector as $s ) { if( is_numeric($s) ) { $row_i = intval($s) - 1; $name .= "_{$row_i}"; } else { $field = acf_get_sub_field( $s, $field ); if( !$field ) { $field = acf_get_valid_field(array( 'name' => $s, 'key' => '', 'type' => '', )); } $name .= "_{$field['name']}"; } } $field['name'] = $name; } if( $value === null ) { return acf_delete_value( $post_id, $field ); } return acf_update_value( $value, $post_id, $field ); } function delete_field( $selector, $post_id = false ) { $post_id = acf_get_valid_post_id( $post_id ); $field = acf_maybe_get_field( $selector, $post_id ); return acf_delete_value( $post_id, $field ); } function delete_sub_field( $selector, $post_id = false ) { return update_sub_field( $selector, null, $post_id ); } function create_field( $field ) { acf_render_field( $field ); } function render_field( $field ) { acf_render_field( $field ); } function acf_convert_field_names_to_keys( $value, $field ) { if( !isset($field['sub_fields']) ) { return $value; } $sub_fields = array(); if( $field['sub_fields'] ) { foreach( $field['sub_fields'] as $sub_field ) { $sub_fields[ $sub_field['name'] ] = $sub_field; } } if( is_array($value) ) { foreach( $value as $row_i => $row) { if( $row ) { foreach( $row as $sub_field_name => $sub_field_value ) { if( !isset($sub_fields[ $sub_field_name ]) ) { continue; } $sub_field = $sub_fields[ $sub_field_name ]; $sub_field_value = acf_convert_field_names_to_keys( $sub_field_value, $sub_field ); $value[$row_i][ $sub_field['key'] ] = $sub_field_value; unset( $value[$row_i][$sub_field_name] ); } } } } return $value; } function register_field_group( $field_group ) { acf_add_local_field_group( $field_group ); } function reset_the_repeater_field() { return reset_rows(); } function the_repeater_field( $field_name, $post_id = false ) { return has_sub_field( $field_name, $post_id ); } function the_flexible_field( $field_name, $post_id = false ) { return has_sub_field( $field_name, $post_id ); } function acf_filter_post_id( $post_id ) { return acf_get_valid_post_id( $post_id ); } ?>
