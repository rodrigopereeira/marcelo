<?php  function acf_get_setting( $name, $default = null ) { $settings = acf()->settings; $setting = acf_maybe_get( $settings, $name, $default ); $setting = apply_filters( "acf/settings/{$name}", $setting ); return $setting; } function acf_get_compatibility( $name ) { return apply_filters( "acf/compatibility/{$name}", false ); } function acf_update_setting( $name, $value ) { acf()->settings[ $name ] = $value; } function acf_append_setting( $name, $value ) { if( !isset(acf()->settings[ $name ]) ) { acf()->settings[ $name ] = array(); } acf()->settings[ $name ][] = $value; } function acf_get_path( $path ) { return acf_get_setting('path') . $path; } function acf_get_dir( $path ) { return acf_get_setting('dir') . $path; } function acf_include( $file ) { $path = acf_get_path( $file ); if( file_exists($path) ) { include_once( $path ); } } function acf_parse_args( $args, $defaults = array() ) { if( !is_array($args) ) { $args = array(); } $args = wp_parse_args( $args, $defaults ); $args = acf_parse_types( $args ); return $args; } function acf_parse_types( $array ) { $restricted = array( 'label', 'name', 'value', 'instructions', 'nonce' ); foreach( array_keys($array) as $k ) { if( !in_array($k, $restricted, true) ) { $array[ $k ] = acf_parse_type( $array[ $k ] ); } } return $array; } function acf_parse_type( $v ) { if( is_array($v) ) { return acf_parse_types($v); } if( !is_string($v) ) { return $v; } $v = trim($v); if( is_numeric($v) && strval((int)$v) === $v ) { $v = intval( $v ); } return $v; } function acf_get_view( $view_name = '', $args = array() ) { $path = acf_get_path("admin/views/{$view_name}.php"); if( file_exists($path) ) { include( $path ); } } function acf_merge_atts( $atts, $extra = array() ) { if( empty($extra) ) { return $atts; } foreach( $extra as $k => $v ) { if( $k == 'class' || $k == 'style' ) { if( $v === '' ) { continue; } $v = $atts[ $k ] . ' ' . $v; } $atts[ $k ] = $v; } return $atts; } function acf_esc_attr( $atts ) { if( is_string($atts) ) { $atts = trim( $atts ); return esc_attr( $atts ); } if( empty($atts) ) { return ''; } $e = array(); foreach( $atts as $k => $v ) { if( is_array($v) || is_object($v) ) { $v = json_encode($v); } elseif( is_bool($v) ) { $v = $v ? 1 : 0; } elseif( is_string($v) ) { $v = trim($v); } $e[] = $k . '="' . esc_attr( $v ) . '"'; } return implode(' ', $e); } function acf_esc_attr_e( $atts ) { echo acf_esc_attr( $atts ); } function acf_get_hidden_input( $atts ) { $atts['type'] = 'hidden'; return '<input ' . acf_esc_attr( $atts ) . ' />'; } function acf_hidden_input( $atts ) { echo acf_get_hidden_input( $atts ); } function acf_extract_var( &$array, $key ) { if( is_array($array) && array_key_exists($key, $array) ) { $v = $array[ $key ]; unset( $array[ $key ] ); return $v; } return null; } function acf_extract_vars( &$array, $keys ) { $r = array(); foreach( $keys as $key ) { $r[ $key ] = acf_extract_var( $array, $key ); } return $r; } function acf_get_post_types( $exclude = array(), $include = array() ) { $post_types = get_post_types(); $exclude = wp_parse_args( $exclude, array('acf-field', 'acf-field-group', 'revision', 'nav_menu_item') ); if( !empty($include) ) { foreach( array_keys($include) as $i ) { $post_type = $include[ $i ]; if( post_type_exists($post_type) ) { $post_types[ $post_type ] = $post_type; } } } foreach( array_values($exclude) as $i ) { unset( $post_types[ $i ] ); } $post_types = array_values($post_types); return $post_types; } function acf_get_pretty_post_types( $post_types = array() ) { if( empty($post_types) ) { $post_types = acf_get_post_types(); } $ref = array(); $r = array(); foreach( $post_types as $post_type ) { $label = $post_type; if( post_type_exists($post_type) ) { $obj = get_post_type_object($post_type); $label = $obj->labels->singular_name; } $r[ $post_type ] = $label; if( !isset($ref[ $label ]) ) { $ref[ $label ] = 0; } $ref[ $label ]++; } foreach( array_keys($r) as $i ) { $post_type = $r[ $i ]; if( $ref[ $post_type ] > 1 ) { $r[ $i ] .= ' (' . $i . ')'; } } return $r; } function acf_verify_nonce( $value, $post_id = 0 ) { $nonce = acf_maybe_get( $_POST, '_acfnonce' ); if( !$nonce || !wp_verify_nonce($nonce, $value) ) { return false; } if( $post_id ) { $form_post_id = (int) acf_maybe_get( $_POST, 'post_ID' ); $post_parent = wp_is_post_revision( $post_id ); if( !$form_post_id ) { } elseif( $post_id === $form_post_id ) { } elseif( $post_parent === $form_post_id ) { return true; } else { return false; } } $_POST['_acfnonce'] = false; return true; } function acf_verify_ajax() { if( empty($_POST['action']) || substr($_POST['action'], 0, 3) !== 'acf' ) { return false; } if( empty($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'acf_nonce') ) { return false; } do_action('acf/verify_ajax'); return true; } function acf_add_admin_notice( $text, $class = '', $wrap = 'p' ) { $admin_notices = acf_get_admin_notices(); $admin_notices[] = array( 'text' => $text, 'class' => "updated {$class}", 'wrap' => $wrap ); acf_update_setting( 'admin_notices', $admin_notices ); return ( count( $admin_notices ) - 1 ); } function acf_get_admin_notices() { $admin_notices = acf_get_setting( 'admin_notices' ); if( !$admin_notices ) { $admin_notices = array(); } return $admin_notices; } function acf_get_image_sizes() { global $_wp_additional_image_sizes; $sizes = array( 'thumbnail' => __("Thumbnail",'acf'), 'medium' => __("Medium",'acf'), 'large' => __("Large",'acf') ); $all_sizes = get_intermediate_image_sizes(); if( !empty($all_sizes) ) { foreach( $all_sizes as $size ) { if( isset($sizes[ $size ]) ) { continue; } $label = str_replace('-', ' ', $size); $label = ucwords( $label ); $sizes[ $size ] = $label; } } foreach( array_keys($sizes) as $s ) { $w = isset($_wp_additional_image_sizes[$s]['width']) ? $_wp_additional_image_sizes[$s]['width'] : get_option( "{$s}_size_w" ); $h = isset($_wp_additional_image_sizes[$s]['height']) ? $_wp_additional_image_sizes[$s]['height'] : get_option( "{$s}_size_h" ); if( $w && $h ) { $sizes[ $s ] .= " ({$w} x {$h})"; } } $sizes['full'] = __("Full Size",'acf'); $sizes = apply_filters( 'acf/get_image_sizes', $sizes ); return $sizes; } function acf_get_taxonomies() { $taxonomies = get_taxonomies( false, 'objects' ); $ignore = array( 'nav_menu', 'link_category' ); $r = array(); foreach( $taxonomies as $taxonomy ) { if( in_array($taxonomy->name, $ignore) ) { continue; } $r[ $taxonomy->name ] = $taxonomy->name; } return $r; } function acf_get_pretty_taxonomies( $taxonomies = array() ) { if( empty($taxonomies) ) { $taxonomies = acf_get_taxonomies(); } $ref = array(); $r = array(); foreach( array_keys($taxonomies) as $i ) { $taxonomy = acf_extract_var( $taxonomies, $i); $obj = get_taxonomy( $taxonomy ); $name = $obj->labels->singular_name; $r[ $taxonomy ] = $name; if( !isset($ref[ $name ]) ) { $ref[ $name ] = 0; } $ref[ $name ]++; } foreach( array_keys($r) as $i ) { $taxonomy = $r[ $i ]; if( $ref[ $taxonomy ] > 1 ) { $r[ $i ] .= ' (' . $i . ')'; } } return $r; } function acf_get_taxonomy_terms( $taxonomies = array() ) { $taxonomies = acf_get_array( $taxonomies ); $taxonomies = acf_get_pretty_taxonomies( $taxonomies ); $r = array(); foreach( array_keys($taxonomies) as $taxonomy ) { $label = $taxonomies[ $taxonomy ]; $terms = get_terms( $taxonomy, array( 'hide_empty' => false ) ); if( !empty($terms) ) { $r[ $label ] = array(); foreach( $terms as $term ) { $k = "{$taxonomy}:{$term->slug}"; $r[ $label ][ $k ] = $term->name; } } } return $r; } function acf_decode_taxonomy_terms( $terms = false ) { if( !$terms ) { $terms = acf_get_taxonomy_terms(); } $r = array(); foreach( $terms as $term ) { $data = acf_decode_taxonomy_term( $term ); if( !array_key_exists($data['taxonomy'], $r) ) { $r[ $data['taxonomy'] ] = array(); } $r[ $data['taxonomy'] ][] = $data['term']; } return $r; } function acf_decode_taxonomy_term( $string ) { $r = array(); $data = explode(':', $string); $taxonomy = 'category'; $term = ''; if( isset($data[1]) ) { $taxonomy = $data[0]; $term = $data[1]; } $r['taxonomy'] = $taxonomy; $r['term'] = $term; return $r; } function acf_get_array( $var = false, $delimiter = ',' ) { if( is_array($var) ) { return $var; } if( empty($var) && !is_numeric($var) ) { return array(); } if( is_string($var) && $delimiter ) { return explode($delimiter, $var); } return array( $var ); } function acf_get_posts( $args = array() ) { $posts = array(); $args = acf_parse_args( $args, array( 'posts_per_page' => -1, 'post_type' => '', 'post_status' => 'any' )); if( empty($args['post_type']) ) { $args['post_type'] = acf_get_post_types(); } if( $args['post__in'] ) { $args['post__in'] = acf_get_array( $args['post__in'] ); $args['post__in'] = array_map('intval', $args['post__in']); $args['orderby'] = 'post__in'; } $posts = get_posts($args); if( $posts && $args['post__in'] ) { $order = array(); foreach( $posts as $i => $post ) { $order[ $i ] = array_search($post->ID, $args['post__in']); } array_multisort($order, $posts); } return $posts; } function _acf_query_remove_post_type( $sql ) { global $wpdb; if( strpos($sql, "$wpdb->posts.ID IN") === false ) { return $sql; } $glue = 'AND'; $bits = explode($glue, $sql); foreach( $bits as $i => $bit ) { if( strpos($bit, "$wpdb->posts.post_type") !== false ) { unset( $bits[ $i ] ); } } $sql = implode($glue, $bits); return $sql; } function acf_get_grouped_posts( $args ) { $r = array(); $args = acf_parse_args( $args, array( 'posts_per_page' => -1, 'paged' => 0, 'post_type' => 'post', 'orderby' => 'menu_order title', 'order' => 'ASC', 'post_status' => 'any', 'suppress_filters' => false, 'update_post_meta_cache' => false, )); $post_types = acf_get_array( $args['post_type'] ); $post_types_labels = acf_get_pretty_post_types($post_types); if( count($post_types) == 1 ) { $args['post_type'] = current($post_types); } add_filter('posts_orderby', '_acf_orderby_post_type', 10, 2); $posts = get_posts( $args ); remove_filter('posts_orderby', '_acf_orderby_post_type'); foreach( $post_types as $post_type ) { $this_posts = array(); $this_group = array(); foreach( array_keys($posts) as $key ) { if( $posts[ $key ]->post_type == $post_type ) { $this_posts[] = acf_extract_var( $posts, $key ); } } if( empty($this_posts) ) { continue; } if( is_post_type_hierarchical($post_type) && empty($args['s'])) { $match_id = $this_posts[ 0 ]->ID; $offset = 0; $length = count($this_posts); $parent = acf_maybe_get( $args, 'post_parent', 0 ); $this_posts = array(); $all_args = array_merge($args, array( 'posts_per_page' => -1, 'paged' => 0, 'post_type' => $post_type )); $all_posts = get_posts( $all_args ); foreach( $all_posts as $offset => $p ) { if( $p->ID == $match_id ) { break; } } $all_posts = get_page_children( $parent, $all_posts ); for( $i = $offset; $i < ($offset + $length); $i++ ) { $this_posts[] = acf_extract_var( $all_posts, $i); } } foreach( array_keys($this_posts) as $key ) { $post = acf_extract_var( $this_posts, $key ); $this_group[ $post->ID ] = $post; } $post_type_name = $post_types_labels[ $post_type ]; $r[ $post_type_name ] = $this_group; } return $r; } function _acf_orderby_post_type( $ordeby, $wp_query ) { global $wpdb; $post_types = $wp_query->get('post_type'); if( is_array($post_types) ) { $post_types = implode("','", $post_types); $ordeby = "FIELD({$wpdb->posts}.post_type,'$post_types')," . $ordeby; } return $ordeby; } function acf_get_post_title( $post = 0 ) { if( is_numeric($post) ) { $post = get_post($post); } $title = get_the_title( $post->ID ); if( $title === '' ) { $title = __('(no title)', 'acf'); } if( $post->post_type != 'attachment' ) { $ancestors = get_ancestors( $post->ID, $post->post_type ); $title = str_repeat('- ', count($ancestors)) . $title; } if( get_post_status( $post->ID ) != "publish" ) { $title .= ' (' . get_post_status( $post->ID ) . ')'; } return $title; } function acf_order_by_search( $array, $search ) { $weights = array(); $needle = strtolower( $search ); foreach( array_keys($array) as $k ) { $array[ '_' . $k ] = acf_extract_var( $array, $k ); } foreach( $array as $k => $v ) { $weight = 0; $haystack = strtolower( $v ); $strpos = strpos( $haystack, $needle ); if( $strpos !== false ) { $weight = strlen( $search ); if( $strpos == 0 ) { $weight++; } } $weights[ $k ] = $weight; } array_multisort( $weights, SORT_DESC, $array ); foreach( array_keys($array) as $k ) { $array[ substr($k,1) ] = acf_extract_var( $array, $k ); } return $array; } function acf_json_encode( $json ) { if( version_compare(PHP_VERSION, '5.4.0', '>=') ) { return json_encode($json, JSON_PRETTY_PRINT); } $json = json_encode($json); $result = ''; $pos = 0; $strLen = strlen($json); $indentStr = "    "; $newLine = "\n"; $prevChar = ''; $outOfQuotes = true; for ($i=0; $i<=$strLen; $i++) { $char = substr($json, $i, 1); if ($char == '"' && $prevChar != '\\') { $outOfQuotes = !$outOfQuotes; } else if(($char == '}' || $char == ']') && $outOfQuotes) { $result .= $newLine; $pos --; for ($j=0; $j<$pos; $j++) { $result .= $indentStr; } } $result .= $char; if($char == ':' && $outOfQuotes) { $result .= ' '; } if (($char == ',' || $char == '{' || $char == '[') && $outOfQuotes) { $result .= $newLine; if ($char == '{' || $char == '[') { $pos ++; } for ($j = 0; $j < $pos; $j++) { $result .= $indentStr; } } $prevChar = $char; } return $result; } function acf_str_exists( $needle, $haystack ) { if( is_string($haystack) && strpos($haystack, $needle) !== false ) { return true; } return false; } function acf_debug() { $args = func_get_args(); $s = array_shift($args); $o = ''; $nl = "\r\n"; $o .= '<script type="text/javascript">' . $nl; $o .= 'console.log("' . $s . '"'; if( !empty($args) ) { foreach( $args as $arg ) { if( is_object($arg) || is_array($arg) ) { $arg = json_encode($arg); } elseif( is_bool($arg) ) { $arg = $arg ? 'true' : 'false'; }elseif( is_string($arg) ) { $arg = '"' . $arg . '"'; } $o .= ', ' . $arg; } } $o .= ');' . $nl; $o .= '</script>' . $nl; echo $o; } function acf_debug_start() { acf_update_setting( 'debug_start', memory_get_usage()); } function acf_debug_end() { $start = acf_get_setting( 'debug_start' ); $end = memory_get_usage(); return $end - $start; } function acf_get_updates() { $updates = array(); $plugin_version = acf_get_setting('version'); $acf_version = get_option('acf_version'); $path = acf_get_path('admin/updates'); if( !$acf_version ) { return false; } if( !file_exists( $path ) ) { return false; } $dir = opendir( $path ); while(false !== ( $file = readdir($dir)) ) { if( substr($file, -4) !== '.php' ) { continue; } $update_version = substr($file, 0, -4); if( version_compare( $update_version, $plugin_version, '>') ) { continue; } if( version_compare( $update_version, $acf_version, '<=') ) { continue; } $updates[] = $update_version; } return $updates; } function acf_encode_choices( $array = array() ) { if( !is_array($array) ) { return $array; } $string = ''; if( !empty($array) ) { foreach( $array as $k => $v ) { if( $k !== $v ) { $array[ $k ] = $k . ' : ' . $v; } } $string = implode("\n", $array); } return $string; } function acf_decode_choices( $string = '' ) { if( $string === '') { return array(); } elseif( is_numeric($string) ) { return array( $string ); } elseif( !is_string($string) ) { return $string; } $array = array(); $lines = explode("\n", $string); foreach( $lines as $line ) { $k = trim($line); $v = trim($line); if( acf_str_exists(' : ', $line) ) { $line = explode(' : ', $line); $k = trim($line[0]); $v = trim($line[1]); } $array[ $k ] = $v; } return $array; } acf_update_setting('php_to_js_date_formats', array( 'Y' => 'yy', 'y' => 'y', 'm' => 'mm', 'n' => 'm', 'F' => 'MM', 'M' => 'M', 'l' => 'DD', 'D' => 'D', 'd' => 'dd', 'j' => 'd', 'S' => '', )); function acf_convert_date_to_php( $date ) { $ignore = array(); $php_to_js = acf_get_setting('php_to_js_date_formats'); foreach( $php_to_js as $replace => $search ) { if( in_array($search, $ignore) ) { continue; } $date = str_replace($search, $replace, $date); $ignore[] = $replace; } return $date; } function acf_convert_date_to_js( $date ) { $ignore = array(); $php_to_js = acf_get_setting('php_to_js_date_formats'); foreach( $php_to_js as $search => $replace ) { if( in_array($search, $ignore) ) { continue; } $date = str_replace($search, $replace, $date); $ignore[] = $replace; } return $date; } function acf_update_user_setting( $name, $value ) { $user_id = get_current_user_id(); $settings = get_user_meta( $user_id, 'acf_user_settings', false ); if( isset($settings[0]) ) { $settings = $settings[0]; } else { $settings = array(); } $settings[ $name ] = $value; return update_metadata('user', $user_id, 'acf_user_settings', $settings); } function acf_get_user_setting( $name = '', $default = false ) { $user_id = get_current_user_id(); $settings = get_user_meta( $user_id, 'acf_user_settings', false ); if( empty($settings[0][$name]) ) { return $default; } return $settings[0][$name]; } function acf_in_array( $value, $array ) { if( !is_array($array) ) { return false; } return in_array($value, $array); } function acf_get_valid_post_id( $post_id = 0 ) { if( !$post_id ) { $post_id = (int) get_the_ID(); } if( $post_id == 'option' ) { $post_id = 'options'; } if( is_object($post_id) ) { if( isset($post_id->roles, $post_id->ID) ) { $post_id = 'user_' . $post_id->ID; } elseif( isset($post_id->taxonomy, $post_id->term_id) ) { $post_id = $post_id->taxonomy . '_' . $post_id->term_id; } elseif( isset($post_id->comment_ID) ) { $post_id = 'comment_' . $post_id->comment_ID; } elseif( isset($post_id->ID) ) { $post_id = $post_id->ID; } } if( $post_id == 'options' ) { $dl = acf_get_setting('default_language'); $cl = acf_get_setting('current_language'); if( $cl && $cl !== $dl ) { $post_id .= '_' . $cl; } } if( isset($_GET['preview_id']) ) { $autosave = wp_get_post_autosave( $_GET['preview_id'] ); if( $autosave && $autosave->post_parent == $post_id ) { $post_id = (int) $autosave->ID; } } return $post_id; } function acf_upload_files( $ancestors = array() ) { $file = array( 'name' => '', 'type' => '', 'tmp_name' => '', 'error' => '', 'size' => '' ); foreach( array_keys($file) as $k ) { $file[ $k ] = $_FILES['acf'][ $k ]; } if( !empty($ancestors) ) { foreach( $ancestors as $a ) { foreach( array_keys($file) as $k ) { $file[ $k ] = $file[ $k ][ $a ]; } } } if( is_array($file['name']) ) { foreach( array_keys($file['name']) as $k ) { $_ancestors = array_merge($ancestors, array($k)); acf_upload_files( $_ancestors ); } return; } if( $file['error'] ) { return; } $_POST['_acfuploader'] = end($ancestors); $attachment_id = acf_upload_file( $file ); array_unshift($ancestors, 'acf'); acf_update_nested_array( $_POST, $ancestors, $attachment_id ); } function acf_upload_file( $uploaded_file ) { require_once( ABSPATH . "/wp-load.php" ); require_once( ABSPATH . "/wp-admin/includes/file.php" ); require_once( ABSPATH . "/wp-admin/includes/image.php" ); $upload_overrides = array( 'test_form' => false ); $file = wp_handle_upload( $uploaded_file, $upload_overrides ); if( isset($file['error']) ) { return $file['error']; } $url = $file['url']; $type = $file['type']; $file = $file['file']; $filename = basename($file); $object = array( 'post_title' => $filename, 'post_mime_type' => $type, 'guid' => $url, 'context' => 'acf-upload' ); $id = wp_insert_attachment($object, $file); wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) ); do_action( 'wp_create_file_in_uploads', $file, $id ); return $id; } function acf_update_nested_array( &$array, $ancestors, $value ) { if( empty($ancestors) ) { $array = $value; return true; } $k = array_shift( $ancestors ); if( isset($array[ $k ]) ) { return acf_update_nested_array( $array[ $k ], $ancestors, $value ); } return false; } function acf_is_screen( $id = '' ) { $current_screen = get_current_screen(); return ($id === $current_screen->id); } function acf_maybe_get( $array, $key, $default = null ) { $keys = explode('/', $key); foreach( $keys as $k ) { if( !isset($array[ $k ]) ) { return $default; } $array = $array[ $k ]; } return $array; } function acf_get_attachment( $post ) { if ( !$post = get_post( $post ) ) { return false; } $thumb_id = 0; $id = $post->ID; $a = array( 'ID' => $id, 'id' => $id, 'title' => $post->post_title, 'filename' => wp_basename( $post->guid ), 'url' => wp_get_attachment_url( $id ), 'alt' => get_post_meta($id, '_wp_attachment_image_alt', true), 'author' => $post->post_author, 'description' => $post->post_content, 'caption' => $post->post_excerpt, 'name' => $post->post_name, 'date' => $post->post_date_gmt, 'modified' => $post->post_modified_gmt, 'mime_type' => $post->post_mime_type, 'type' => acf_maybe_get( explode('/', $post->post_mime_type), 0, '' ), 'icon' => wp_mime_type_icon( $id ) ); if( $a['type'] === 'image' ) { $thumb_id = $id; $src = wp_get_attachment_image_src( $id, 'full' ); $a['url'] = $src[0]; $a['width'] = $src[1]; $a['height'] = $src[2]; } elseif( $a['type'] === 'audio' || $a['type'] === 'video' ) { if( $a['type'] == 'video' ) { $meta = wp_get_attachment_metadata( $id ); $a['width'] = acf_maybe_get($meta, 'width', 0); $a['height'] = acf_maybe_get($meta, 'height', 0); } if( $featured_id = get_post_thumbnail_id($id) ) { $thumb_id = $featured_id; } } if( $thumb_id ) { if( $sizes = get_intermediate_image_sizes() ) { $a['sizes'] = array(); foreach( $sizes as $size ) { $src = wp_get_attachment_image_src( $thumb_id, $size ); $a['sizes'][ $size ] = $src[0]; $a['sizes'][ $size . '-width' ] = $src[1]; $a['sizes'][ $size . '-height' ] = $src[2]; } } } return $a; } function acf_get_truncated( $text, $length = 64 ) { $text = trim($text); $the_length = strlen( $text ); $return = substr( $text, 0, ($length - 3) ); if( $the_length > ($length - 3) ) { $return .= '...'; } return $return; } function acf_get_current_url() { $home = home_url(); $url = home_url($_SERVER['REQUEST_URI']); $bits = explode('/', $home, 4); if( !empty($bits[3]) ) { $find = '/' . $bits[3]; $pos = strpos($url, $find); $length = strlen($find); if( $pos !== false ) { $url = substr_replace($url, '', $pos, $length); } } return $url; } function acf_current_user_can_admin() { if( acf_get_setting('show_admin') && current_user_can(acf_get_setting('capability')) ) { return true; } return false; } function acf_get_filesize( $size = 1 ) { $unit = 'MB'; $units = array( 'TB' => 4, 'GB' => 3, 'MB' => 2, 'KB' => 1, ); if( is_string($size) ) { $custom = strtoupper( substr($size, -2) ); foreach( $units as $k => $v ) { if( $custom === $k ) { $unit = $k; $size = substr($size, 0, -2); } } } $bytes = floatval($size) * pow(1024, $units[$unit]); return $bytes; } function acf_format_filesize( $size = 1 ) { $bytes = acf_get_filesize( $size ); $units = array( 'TB' => 4, 'GB' => 3, 'MB' => 2, 'KB' => 1, ); foreach( $units as $k => $v ) { $result = $bytes / pow(1024, $v); if( $result >= 1 ) { return $result . ' ' . $k; } } return $bytes . ' B'; } function acf_get_valid_terms( $terms = false, $taxonomy = 'category' ) { if( !function_exists('wp_get_split_term') || empty($terms) ) { return $terms; } $is_array = is_array($terms); $terms = acf_get_array( $terms ); $terms = array_map('intval', $terms); foreach( $terms as $i => $term_id ) { $new_term_id = wp_get_split_term($term_id, $taxonomy); if( $new_term_id ) { $terms[ $i ] = $new_term_id; } } if( !$is_array ) { $terms = $terms[0]; } return $terms; } function acf_validate_attachment( $attachment, $field, $context = 'prepare' ) { $errors = array(); $file = array( 'type' => '', 'width' => 0, 'height' => 0, 'size' => 0 ); if( $context == 'upload' ) { $file['type'] = pathinfo($attachment['name'], PATHINFO_EXTENSION); $file['size'] = filesize($attachment['tmp_name']); if( strpos($attachment['type'], 'image') !== false ) { $size = getimagesize($attachment['tmp_name']); $file['width'] = acf_maybe_get($size, 0); $file['height'] = acf_maybe_get($size, 1); } } elseif( $context == 'prepare' ) { $file['type'] = pathinfo($attachment['url'], PATHINFO_EXTENSION); $file['size'] = acf_maybe_get($attachment, 'filesizeInBytes', 0); $file['width'] = acf_maybe_get($attachment, 'width', 0); $file['height'] = acf_maybe_get($attachment, 'height', 0); } else { $file = wp_parse_args($file, $attachment); } if( $file['width'] || $file['height'] ) { $min_width = (int) acf_maybe_get($field, 'min_width', 0); $max_width = (int) acf_maybe_get($field, 'max_width', 0); if( $file['width'] ) { if( $min_width && $file['width'] < $min_width ) { $errors['min_width'] = sprintf(__('Image width must be at least %dpx.', 'acf'), $min_width ); } elseif( $max_width && $file['width'] > $max_width ) { $errors['max_width'] = sprintf(__('Image width must not exceed %dpx.', 'acf'), $max_width ); } } $min_height = (int) acf_maybe_get($field, 'min_height', 0); $max_height = (int) acf_maybe_get($field, 'max_height', 0); if( $file['height'] ) { if( $min_height && $file['height'] < $min_height ) { $errors['min_height'] = sprintf(__('Image height must be at least %dpx.', 'acf'), $min_height ); } elseif( $max_height && $file['height'] > $max_height ) { $errors['max_height'] = sprintf(__('Image height must not exceed %dpx.', 'acf'), $max_height ); } } } if( $file['size'] ) { $min_size = acf_maybe_get($field, 'min_size', 0); $max_size = acf_maybe_get($field, 'max_size', 0); if( $min_size && $file['size'] < acf_get_filesize($min_size) ) { $errors['min_size'] = sprintf(__('File size must be at least %s.', 'acf'), acf_format_filesize($min_size) ); } elseif( $max_size && $file['size'] > acf_get_filesize($max_size) ) { $errors['max_size'] = sprintf(__('File size must must not exceed %s.', 'acf'), acf_format_filesize($max_size) ); } } if( $file['type'] ) { $mime_types = acf_maybe_get($field, 'mime_types', ''); $file['type'] = strtolower($file['type']); $mime_types = strtolower($mime_types); $mime_types = str_replace(array(' ', '.'), '', $mime_types); $mime_types = explode(',', $mime_types); $mime_types = array_filter($mime_types); if( !empty($mime_types) && !in_array($file['type'], $mime_types) ) { if( count($mime_types) > 1 ) { $last1 = array_pop($mime_types); $last2 = array_pop($mime_types); $mime_types[] = $last2 . ' ' . __('or', 'acf') . ' ' . $last1; } $errors['mime_types'] = sprintf(__('File type must be %s.', 'acf'), implode(', ', $mime_types) ); } } $errors = apply_filters("acf/validate_attachment", $errors, $file, $attachment, $field); $errors = apply_filters("acf/validate_attachment/type={$field['type']}", $errors, $file, $attachment, $field ); $errors = apply_filters("acf/validate_attachment/name={$field['name']}", $errors, $file, $attachment, $field ); $errors = apply_filters("acf/validate_attachment/key={$field['key']}", $errors, $file, $attachment, $field ); return $errors; } add_filter('acf/settings/uploader', '_acf_settings_uploader'); function _acf_settings_uploader( $uploader ) { if( !current_user_can('upload_files') ) { $uploader = 'basic'; } return $uploader; } add_filter("acf/settings/slug", '_acf_settings_slug'); function _acf_settings_slug( $v ) { $basename = acf_get_setting('basename'); $slug = explode('/', $basename); $slug = current($slug); return $slug; } ?>
