<?php  class acf_settings_updates { var $view; function __construct() { add_action('admin_menu', array($this, 'admin_menu'), 20 ); } function admin_menu() { $basename = acf_get_setting('basename'); if( !acf_get_setting('show_admin') ) { return; } if( !acf_get_setting('show_updates') ) { return; } if( !is_plugin_active($basename) ) { return; } $page = add_submenu_page('edit.php?post_type=acf-field-group', __('Updates','acf'), __('Updates','acf'), acf_get_setting('capability'),'acf-settings-updates', array($this,'html') ); add_action('load-' . $page, array($this,'load')); } function load() { if( acf_verify_nonce('activate_pro_licence') ) { $this->activate_pro_licence(); } elseif( acf_verify_nonce('deactivate_pro_licence') ) { $this->deactivate_pro_licence(); } $this->view = array( 'license' => '', 'active' => 0, 'current_version' => acf_get_setting('version'), 'remote_version' => '', 'update_available' => false, 'changelog' => '', 'upgrade_notice' => '' ); if( acf_pro_is_license_active() ) { $this->view['license'] = acf_pro_get_license(); $this->view['active'] = 1; } $info = acf_pro_get_remote_info(); if( empty($info) ) { acf_add_admin_notice( __('<b>Error</b>. Could not connect to update server', 'acf'), 'error'); return; } $this->view['remote_version'] = $info['version']; if( acf_pro_is_update_available() ) { $this->view['update_available'] = true; $changelogs = explode('<h4>', $info['changelog']); foreach( $changelogs as $changelog ) { if( empty($changelog) ) { continue; } $changelog = explode('</h4>', $changelog); $changelog_version = trim($changelog[0]); $changelog_text = trim($changelog[1]); $changelog_text = str_replace('<ul>', '<ul class="ul-disc">', $changelog_text); if( version_compare($this->view['remote_version'], $changelog_version, '==') ) { $this->view['changelog'] = $changelog_text; break; } } $upgrade_notices = explode('<h4>', $info['upgrade_notice']); foreach( $upgrade_notices as $upgrade_notice ) { if( empty($upgrade_notice) ) { continue; } $upgrade_notice = explode('</h4>', $upgrade_notice); $upgrade_version = trim($upgrade_notice[0]); $upgrade_text = trim($upgrade_notice[1]); $upgrade_text = str_replace('<ul>', '<ul class="ul-disc">', $upgrade_text); if( version_compare($this->view['current_version'], $upgrade_version, '<') ) { $this->view['upgrade_notice'] = $upgrade_text; break; } } } } function html() { acf_pro_get_view('settings-updates', $this->view); } function activate_pro_licence() { $args = array( '_nonce' => wp_create_nonce('activate_pro_licence'), 'acf_license' => acf_extract_var($_POST, 'acf_pro_licence'), 'acf_version' => acf_get_setting('version'), 'wp_name' => get_bloginfo('name'), 'wp_url' => home_url(), 'wp_version' => get_bloginfo('version'), 'wp_language' => get_bloginfo('language'), 'wp_timezone' => get_option('timezone_string'), ); $response = acf_pro_get_remote_response( 'activate-license', $args ); if( empty($response) ) { acf_add_admin_notice( __('<b>Connection Error</b>. Sorry, please try again', 'acf'), 'error'); return; } $response = json_decode($response, true); $class = ''; if( $response['status'] == 1 ) { acf_pro_update_license($response['license']); } else { $class = 'error'; } if( $response['message'] ) { acf_add_admin_notice($response['message'], $class); } } function deactivate_pro_licence() { if( !acf_pro_is_license_active() ) { return; } $args = array( '_nonce' => wp_create_nonce('deactivate_pro_licence'), 'acf_license' => acf_pro_get_license(), 'wp_url' => home_url(), ); $response = acf_pro_get_remote_response( 'deactivate-license', $args ); if( empty($response) ) { acf_add_admin_notice(__('<b>Connection Error</b>. Sorry, please try again', 'acf'), 'error'); return; } $response = json_decode($response, true); $class = ''; acf_pro_update_license(''); if( $response['status'] == 1 ) { } else { $class = 'error'; } if( $response['message'] ) { acf_add_admin_notice($response['message'], $class); } } } new acf_settings_updates(); ?>
